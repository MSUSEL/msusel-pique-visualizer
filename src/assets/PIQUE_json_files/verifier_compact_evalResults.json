{
  "name": "C Vendor Quality Model",
  "additionalData": {
    "projectName": "verifier"
  },
  "global_config": {
    "benchmark_strategy": "pique.calibration.MeanSDBenchmarker",
    "weights_strategy": "pique.calibration.NaiveWeighter"
  },
  "factors": {
    "product_factors": {
      "CWE-703 Improper_exception_handling": {
        "name": "CWE-703 Improper_exception_handling",
        "value": 0.00000,
        "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.",
        "weights": {
          "CWE-703": 0.25,
          "CWE-391": 0.25,
          "CWE-252": 0.25,
          "CWE-476": 0.25
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-362 race_conditions": {
        "name": "CWE-362 race_conditions",
        "value": 0E-51,
        "description": "The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
        "weights": {
          "CWE-362/CWE-367!": 0.3333333333333333333333333,
          "CWE-362": 0.3333333333333333333333333,
          "CWE-362, CWE-20": 0.3333333333333333333333333
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-190 Integer_wraparound": {
        "name": "CWE-190 Integer_wraparound",
        "value": 0E-27,
        "description": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",
        "weights": {
          "CWE-190": 1.0
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-398 Code_quality_weaknesses": {
        "name": "CWE-398 Code_quality_weaknesses",
        "value": 0E-28,
        "description": "weaknesses that do not directly introduce a weakness or vulnerability, but indicate that the product has not been carefully developed or maintained.",
        "weights": {
          "CWE-398": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-664 Improper_control_of_a_resource": {
        "name": "CWE-664 Improper_control_of_a_resource",
        "value": 0E-52,
        "description": "The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
        "weights": {
          "CWE-664": 0.05882352941176470588235294,
          "CWE-665": 0.05882352941176470588235294,
          "CWE-401": 0.05882352941176470588235294,
          "CWE-775": 0.05882352941176470588235294,
          "CWE-457": 0.05882352941176470588235294,
          "CWE-404": 0.05882352941176470588235294,
          "CWE-910": 0.05882352941176470588235294,
          "CWE-415": 0.05882352941176470588235294,
          "CWE-416": 0.05882352941176470588235294,
          "CWE-704": 0.05882352941176470588235294,
          "CWE-825": 0.05882352941176470588235294,
          "CWE-195": 0.05882352941176470588235294,
          "CWE-197": 0.05882352941176470588235294,
          "CWE-672": 0.05882352941176470588235294,
          "CWE-771": 0.05882352941176470588235294,
          "CWE-772": 0.05882352941176470588235294,
          "CWE-762": 0.05882352941176470588235294
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-1177 Use_of_prohibited_code": {
        "name": "CWE-1177 Use_of_prohibited_code",
        "value": 0E-53,
        "description": "The software uses a function, library, or third party component that has been explicitly prohibited, whether by the developer or the customer.",
        "weights": {
          "CWE-587": 0.05882352941176470588235294,
          "CWE-686": 0.05882352941176470588235294,
          "CWE-477": 0.05882352941176470588235294,
          "CWE-676": 0.05882352941176470588235294,
          "CWE-687": 0.05882352941176470588235294,
          "CWE-688": 0.05882352941176470588235294,
          "CWE-758": 0.05882352941176470588235294,
          "CWE-570": 0.05882352941176470588235294,
          "CWE-120/CWE-785!": 0.05882352941176470588235294,
          "CWE-571": 0.05882352941176470588235294,
          "CWE-561": 0.05882352941176470588235294,
          "CWE-562": 0.05882352941176470588235294,
          "CWE-683": 0.05882352941176470588235294,
          "CWE-475": 0.05882352941176470588235294,
          "CWE-563": 0.05882352941176470588235294,
          "CWE-685": 0.05882352941176470588235294,
          "CWE-628": 0.05882352941176470588235294
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-119 Improper_restriction_of_operations_in_memory": {
        "name": "CWE-119 Improper_restriction_of_operations_in_memory",
        "value": 0.2187499999999999999999999912500000000000000000000000,
        "description": "The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",
        "weights": {
          "CWE-126": 0.08333333333333333333333333,
          "CWE-786": 0.08333333333333333333333333,
          "CWE-676, CWE-120, CWE-20": 0.08333333333333333333333333,
          "CWE-788": 0.08333333333333333333333333,
          "CWE-120, CWE-20": 0.08333333333333333333333333,
          "CWE-416": 0.08333333333333333333333333,
          "CWE-119": 0.08333333333333333333333333,
          "CWE-119!/CWE-120": 0.08333333333333333333333333,
          "CWE-590": 0.08333333333333333333333333,
          "CWE-120": 0.08333333333333333333333333,
          "CWE-120/CWE-785!": 0.08333333333333333333333333,
          "CWE-362, CWE-20": 0.08333333333333333333333333
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-327 Use of a Broken or Risky Cryptographic Algorithm": {
        "name": "CWE-327 Use of a Broken or Risky Cryptographic Algorithm",
        "value": 0.0000,
        "description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.",
        "weights": {
          "CWE-327": 1.0
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-269 Improper_privilege_management": {
        "name": "CWE-269 Improper_privilege_management",
        "value": 0.000,
        "description": "The software does not properly assign, modify, track, or check privileges for an actor, creating an unintended sphere of control for that actor.",
        "weights": {
          "CWE-250, CWE-22": 0.5,
          "CWE-250": 0.5
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-670 Always_incorrect_control_flow": {
        "name": "CWE-670 Always_incorrect_control_flow",
        "value": 0E-27,
        "description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.",
        "weights": {
          "CWE-667": 0.1666666666666666666666667,
          "CWE-833": 0.1666666666666666666666667,
          "CWE-768": 0.1666666666666666666666667,
          "CWE-834": 0.1666666666666666666666667,
          "CWE-783": 0.1666666666666666666666667,
          "CWE-597": 0.1666666666666666666666667
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-829 Inclusion_of_functionality_from_untrusted_control_sphere": {
        "name": "CWE-829 Inclusion_of_functionality_from_untrusted_control_sphere",
        "value": 0.000,
        "description": "The software imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.",
        "weights": {
          "CWE-829, CWE-20": 1.0
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Misc_product_factor": {
        "name": "Misc_product_factor",
        "value": 0.2500000000000000000000000200,
        "description": "Findings without CWEs attached",
        "weights": {
          "No_CWE_Attached": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-77 OS_command_injection": {
        "name": "CWE-77 OS_command_injection",
        "value": 0.0000,
        "description": "The software constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component.",
        "weights": {
          "CWE-78": 1.0
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-697 Incorrect_comparison": {
        "name": "CWE-697 Incorrect_comparison",
        "value": 0.000,
        "description": " The software compares two entities in a security-relevant context, but the comparison is incorrect, which may lead to resultant weaknesses.",
        "weights": {
          "CWE-595": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-682 Incorrect_calculation": {
        "name": "CWE-682 Incorrect_calculation",
        "value": 0E-28,
        "description": "The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
        "weights": {
          "CWE-467": 0.2,
          "CWE-369": 0.2,
          "CWE-128": 0.2,
          "CWE-131": 0.2,
          "CWE-682": 0.2
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-807 Reliance_on_untrusted_inputs": {
        "name": "CWE-807 Reliance_on_untrusted_inputs",
        "value": 0E-27,
        "description": "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
        "weights": {
          "CWE-807, CWE-20": 0.5,
          "CWE-807": 0.5
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-668 Exposure_of_resource_to_wrong_sphere": {
        "name": "CWE-668 Exposure_of_resource_to_wrong_sphere",
        "value": 0E-28,
        "description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.",
        "weights": {
          "CWE-732": 0.25,
          "CWE-250, CWE-22": 0.25,
          "CWE-134": 0.25,
          "CWE-377": 0.25
        },
        "eval_strategy": "evaluator.WeightedAverageEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      }
    },
    "quality_aspects": {
      "Authenticity": {
        "name": "Authenticity",
        "value": 0E-29,
        "description": "The property that data originated from its purported source.",
        "weights": {
          "CWE-269 Improper_privilege_management": 0.5,
          "CWE-668 Exposure_of_resource_to_wrong_sphere": 0.5
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-398 Code_quality": {
        "name": "CWE-398 Code_quality",
        "value": 0E-29,
        "description": "Weaknesses that do not directly introduce a weakness or vulnerability, but indicate that the product has not been carefully developed or maintained.",
        "weights": {
          "CWE-398 Code_quality_weaknesses": 0.5,
          "CWE-697 Incorrect_comparison": 0.5
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Misc_quality_aspect": {
        "name": "Misc_quality_aspect",
        "value": 0.25000000000000000000000002000,
        "description": "Findings without CWEs attached",
        "weights": {
          "Misc_product_factor": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-710 Improper_adherence_to_coding_standards": {
        "name": "CWE-710 Improper_adherence_to_coding_standards",
        "value": 0E-54,
        "description": "The software does not follow certain coding rules for development, which can lead to weaknesses.",
        "weights": {
          "CWE-1177 Use_of_prohibited_code": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "CWE-691 Insufficient_control_flow_management": {
        "name": "CWE-691 Insufficient_control_flow_management",
        "value": 0E-77,
        "description": "The code does not sufficiently manage its control flow during execution, creating conditions in which the control flow can be modified in unexpected ways.",
        "weights": {
          "CWE-362 race_conditions": 0.3333333333333333333333333,
          "CWE-670 Always_incorrect_control_flow": 0.3333333333333333333333333,
          "CWE-664 Improper_control_of_a_resource": 0.3333333333333333333333333
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Confidentiality": {
        "name": "Confidentiality",
        "value": 0.000000,
        "description": "Preserving authorized restrictions on information access and disclosure, including means for protecting personal privacy and proprietary information.",
        "weights": {
          "CWE-703 Improper_exception_handling": 0.5,
          "CWE-327 Use of a Broken or Risky Cryptographic Algorithm": 0.5
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Cross_cutting": {
        "name": "Cross_cutting",
        "value": 0E-28,
        "description": "Weaknesses in this category are related to the design and architecture of multiple security tactics and how they affect a system. A weakness in this category could lead to a degradation in the quality of many capabilities.",
        "weights": {
          "CWE-807 Reliance_on_untrusted_inputs": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Limit_exposure": {
        "name": "Limit_exposure",
        "value": 0.0000,
        "description": "Weaknesses in this category are related to the design and architecture of the entry points to a system. Frequently these deal with minimizing the attack surface through designing the system with the least needed amount of entry points.",
        "weights": {
          "CWE-829 Inclusion_of_functionality_from_untrusted_control_sphere": 1.0
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      },
      "Integrity": {
        "name": "Integrity",
        "value": 0.054687499999999999999999997812500000000000000000000000,
        "description": "Guarding against improper information modification or destruction, and includes ensuring information non-repudiation and authenticity.",
        "weights": {
          "CWE-190 Integer_wraparound": 0.25,
          "CWE-77 OS_command_injection": 0.25,
          "CWE-682 Incorrect_calculation": 0.25,
          "CWE-119 Improper_restriction_of_operations_in_memory": 0.25
        },
        "eval_strategy": "evaluator.QualityAspectEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      }
    },
    "tqi": {
      "Vendor Security Quality": {
        "name": "Vendor Security Quality",
        "value": 0.033854166666666666666666668000000000000000000000000000000000000000000000000000000000000000000000000000,
        "description": "The total security quality value representing the entire system",
        "weights": {
          "Authenticity": 0.1111111111111111111111111,
          "CWE-398 Code_quality": 0.1111111111111111111111111,
          "Misc_quality_aspect": 0.1111111111111111111111111,
          "CWE-710 Improper_adherence_to_coding_standards": 0.1111111111111111111111111,
          "CWE-691 Insufficient_control_flow_management": 0.1111111111111111111111111,
          "Confidentiality": 0.1111111111111111111111111,
          "Cross_cutting": 0.1111111111111111111111111,
          "Limit_exposure": 0.1111111111111111111111111,
          "Integrity": 0.1111111111111111111111111
        },
        "eval_strategy": "pique.evaluation.DefaultFactorEvaluator",
        "normalizer": "pique.evaluation.DefaultNormalizer",
        "utility_function": "pique.evaluation.DefaultUtility"
      }
    }
  },
  "measures": {
    "CWE-477": {
      "positive": false,
      "name": "CWE-477",
      "value": 0.00,
      "description": "The code uses deprecated or obsolete functions, which suggests that the code has not been actively reviewed or maintained.",
      "weights": {
        "getsCalled": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-676": {
      "positive": false,
      "name": "CWE-676",
      "value": 0E-26,
      "description": "The program invokes a potentially dangerous function that could introduce a vulnerability if it is used incorrectly, but the function can also be used safely.",
      "weights": {
        "FF1069": 0.3333333333333333333333333,
        "uninitstring": 0.3333333333333333333333333,
        "FF1066": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-833": {
      "positive": false,
      "name": "CWE-833",
      "value": 0.00,
      "description": "The software contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.",
      "weights": {
        "globalLockGuard": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-910": {
      "positive": false,
      "name": "CWE-910",
      "value": 0.00,
      "description": "The software uses or accesses a file descriptor after it has been closed.",
      "weights": {
        "useClosedFile": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-834": {
      "positive": false,
      "name": "CWE-834",
      "value": 0.00,
      "description": "The software performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.",
      "weights": {
        "StlMissingComparison": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-119": {
      "positive": false,
      "name": "CWE-119",
      "value": 0.00,
      "description": "The software performs operations on a memory buffer, but it can read from or write to a memory location that is outside of the intended boundary of the buffer.",
      "weights": {
        "invalidscanf": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-758": {
      "positive": false,
      "name": "CWE-758",
      "value": 0.00000,
      "description": "The software uses an API function, data structure, or other entity in a way that relies on properties that are not always guaranteed to hold for that entity.",
      "weights": {
        "CastAddressToIntegerAtReturn": 0.0625,
        "shiftNegativeLHS": 0.0625,
        "wrongmathcall": 0.0625,
        "va_start_referencePassed": 0.0625,
        "CastIntegerToAddressAtReturn": 0.0625,
        "unpreciseMathCall": 0.0625,
        "shiftNegative": 0.0625,
        "pointerOutOfBounds": 0.0625,
        "shiftTooManyBits": 0.0625,
        "unknownSignCharArrayIndex": 0.0625,
        "AssignmentIntegerToAddress": 0.0625,
        "objectIndex": 0.0625,
        "stringLiteralWrite": 0.0625,
        "AssignmentAddressToInteger": 0.0625,
        "memsetClassFloat": 0.0625,
        "shiftTooManyBitsSigned": 0.0625
      },
      "thresholds": [
        0.0,
        1.2301644234758141470267220
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-590": {
      "positive": false,
      "name": "CWE-590",
      "value": 0.00,
      "description": "The application calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().",
      "weights": {
        "autovarInvalidDeallocation": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-195": {
      "positive": false,
      "name": "CWE-195",
      "value": 0.00,
      "description": "The software uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.",
      "weights": {
        "signConversion": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-120/CWE-785!": {
      "positive": false,
      "name": "CWE-120/CWE-785!",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1026": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-197": {
      "positive": false,
      "name": "CWE-197",
      "value": 0E-26,
      "description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.",
      "weights": {
        "truncLongCastAssignment": 0.3333333333333333333333333,
        "checkCastIntToCharAndBack": 0.3333333333333333333333333,
        "truncLongCastReturn": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-595": {
      "positive": false,
      "name": "CWE-595",
      "value": 0.00,
      "description": "The program compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.",
      "weights": {
        "charLiteralWithCharPtrCompare": 0.5,
        "literalWithCharPtrCompare": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-672": {
      "positive": false,
      "name": "CWE-672",
      "value": 0E-26,
      "description": "The software uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.",
      "weights": {
        "accessForwarded": 0.3333333333333333333333333,
        "deallocret": 0.3333333333333333333333333,
        "accessMoved": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-398": {
      "positive": false,
      "name": "CWE-398",
      "value": 0E-27,
      "description": "This software includes weaknesses that do not directly introduce a weakness or vulnerability, but indicate that the product has not been carefully developed or maintained.",
      "weights": {
        "unusedLabelSwitch": 0.01086956521739130434782609,
        "redundantCondition": 0.01086956521739130434782609,
        "noOperatorEq": 0.01086956521739130434782609,
        "comparisonOfTwoFuncsReturningBoolError": 0.01086956521739130434782609,
        "redundantCopyLocalConst": 0.01086956521739130434782609,
        "commaSeparatedReturn": 0.01086956521739130434782609,
        "catchExceptionByValue": 0.01086956521739130434782609,
        "duplicateExpression": 0.01086956521739130434782609,
        "identicalInnerCondition": 0.01086956521739130434782609,
        "unsafeClassCanLeak": 0.01086956521739130434782609,
        "copyCtorPointerCopying": 0.01086956521739130434782609,
        "charBitOp": 0.01086956521739130434782609,
        "assertWithSideEffect": 0.01086956521739130434782609,
        "suspiciousCase": 0.01086956521739130434782609,
        "assignmentInAssert": 0.01086956521739130434782609,
        "uninitDerivedMemberVar": 0.01086956521739130434782609,
        "exceptDeallocThrow": 0.01086956521739130434782609,
        "suspiciousSemicolon": 0.01086956521739130434782609,
        "useStlAlgorithm": 0.01086956521739130434782609,
        "uselessCallsSubstr": 0.01086956521739130434782609,
        "noCopyConstructor": 0.01086956521739130434782609,
        "publicAllocationError": 0.01086956521739130434782609,
        "unusedPrivateFunction": 0.01086956521739130434782609,
        "identicalConditionAfterEarlyExit": 0.01086956521739130434782609,
        "duplicateAssignExpression": 0.01086956521739130434782609,
        "constVariable": 0.01086956521739130434782609,
        "uninitMemberVar": 0.01086956521739130434782609,
        "exceptRethrowCopy": 0.01086956521739130434782609,
        "compareBoolExpressionWithInt": 0.01086956521739130434782609,
        "coutCerrMisusage": 0.01086956521739130434782609,
        "incrementboolean": 0.01086956521739130434782609,
        "duplInheritedMember": 0.01086956521739130434782609,
        "functionConst": 0.01086956521739130434782609,
        "uselessCallsEmpty": 0.01086956521739130434782609,
        "operatorEqToSelf": 0.01086956521739130434782609,
        "duplicateConditionalAssign": 0.01086956521739130434782609,
        "assignIfError": 0.01086956521739130434782609,
        "oppositeExpression": 0.01086956521739130434782609,
        "comparisonOfFuncReturningBoolError": 0.01086956521739130434782609,
        "shadowVariable": 0.01086956521739130434782609,
        "stlSize": 0.01086956521739130434782609,
        "operatorEqVarError": 0.01086956521739130434782609,
        "stlIfFind": 0.01086956521739130434782609,
        "noDestructor": 0.01086956521739130434782609,
        "reademptycontainer": 0.01086956521739130434782609,
        "shadowArgument": 0.01086956521739130434782609,
        "fflushOnInputStream": 0.01086956521739130434782609,
        "variableScope": 0.01086956521739130434782609,
        "throwInNoexceptFunction": 0.01086956521739130434782609,
        "redundantIfRemove": 0.01086956521739130434782609,
        "uninitDerivedMemberVarPrivate": 0.01086956521739130434782609,
        "functionStatic": 0.01086956521739130434782609,
        "moduloAlwaysTrueFalse": 0.01086956521739130434782609,
        "shadowFunction": 0.01086956521739130434782609,
        "useInitializationList": 0.01086956521739130434782609,
        "toomanyconfigs": 0.01086956521739130434782609,
        "thisSubtraction": 0.01086956521739130434782609,
        "uninitMemberVarPrivate": 0.01086956521739130434782609,
        "containerOutOfBounds": 0.01086956521739130434782609,
        "operatorEqShouldBeLeftUnimplemented": 0.01086956521739130434782609,
        "exceptThrowInDestructor": 0.01086956521739130434782609,
        "duplicateValueTernary": 0.01086956521739130434782609,
        "selfAssignment": 0.01086956521739130434782609,
        "comparisonError": 0.01086956521739130434782609,
        "uselessAssignmentArg": 0.01086956521739130434782609,
        "mismatchingBitAnd": 0.01086956521739130434782609,
        "constStatement": 0.01086956521739130434782609,
        "bitwiseOnBoolean": 0.01086956521739130434782609,
        "passedByValue": 0.01086956521739130434782609,
        "operatorEqRetRefThis": 0.01086956521739130434782609,
        "redundantPointerOp": 0.01086956521739130434782609,
        "stlFindInsert": 0.01086956521739130434782609,
        "knownEmptyContainer": 0.01086956521739130434782609,
        "duplicateExpressionTernary": 0.01086956521739130434782609,
        "unusedLabelConfiguration": 0.01086956521739130434782609,
        "postfixOperator": 0.01086956521739130434782609,
        "arrayIndexThenCheck": 0.01086956521739130434782609,
        "duplicateBranch": 0.01086956521739130434782609,
        "unusedLabel": 0.01086956521739130434782609,
        "seekOnAppendedFile": 0.01086956521739130434782609,
        "uselessAssignmentPtrArg": 0.01086956521739130434782609,
        "noExplicitConstructor": 0.01086956521739130434782609,
        "clarifyCondition": 0.01086956521739130434782609,
        "oppositeInnerCondition": 0.01086956521739130434782609,
        "cstyleCast": 0.01086956521739130434782609,
        "comparisonOfBoolWithBoolError": 0.01086956521739130434782609,
        "noConstructor": 0.01086956521739130434782609,
        "operatorEqMissingReturnStatement": 0.01086956521739130434782609,
        "duplicateCondition": 0.01086956521739130434782609,
        "multiCondition": 0.01086956521739130434782609,
        "unusedLabelSwitchConfiguration": 0.01086956521739130434782609,
        "initializerList": 0.01086956521739130434782609
      },
      "thresholds": [
        0.0,
        0.9633101183118887654182430
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-475": {
      "positive": false,
      "name": "CWE-475",
      "value": 0.00,
      "description": "The behavior of this function is undefined unless its control parameter is set to a specific value.",
      "weights": {
        "varFuncNullUB": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-597": {
      "positive": false,
      "name": "CWE-597",
      "value": 0.00,
      "description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.",
      "weights": {
        "stlIfStrFind": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-476": {
      "positive": false,
      "name": "CWE-476",
      "value": 0.000,
      "description": "A NULL pointer dereference occurs when the application dereferences a pointer that it expects to be valid, but is NULL, typically causing a crash or exit.",
      "weights": {
        "nullPointerDefaultArg": 0.25,
        "nullPointerRedundantCheck": 0.25,
        "nullPointer": 0.25,
        "unknown": 0.25
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "No_CWE_Attached": {
      "positive": false,
      "name": "No_CWE_Attached",
      "value": 0.250000000000000000000000020,
      "description": "This error is from something other than a CWE.",
      "weights": {
        "pureVirtualCall": 0.04166666666666666666666667,
        "overlappingStrcmp": 0.04166666666666666666666667,
        "copyCtorAndEqOperator": 0.04166666666666666666666667,
        "knownArgumentHiddenVariableExpression": 0.04166666666666666666666667,
        "ConfigurationNotChecked": 0.04166666666666666666666667,
        "redundantBitwiseOperationInSwitch": 0.04166666666666666666666667,
        "knownArgument": 0.04166666666666666666666667,
        "comparisonOfBoolWithInvalidComparator": 0.04166666666666666666666667,
        "invalidFree": 0.04166666666666666666666667,
        "virtualCallInConstructor": 0.04166666666666666666666667,
        "moduloofone": 0.04166666666666666666666667,
        "purgedConfiguration": 0.04166666666666666666666667,
        "unknown": 0.04166666666666666666666667,
        "missingOverride": 0.04166666666666666666666667,
        "thisUseAfterFree": 0.04166666666666666666666667,
        "invalidScanfFormatWidth_smaller": 0.04166666666666666666666667,
        "unknownMacro": 0.04166666666666666666666667,
        "unsafeClassRefMember": 0.04166666666666666666666667,
        "stlcstrthrow": 0.04166666666666666666666667,
        "missingInclude": 0.04166666666666666666666667,
        "missingIncludeSystem": 0.04166666666666666666666667,
        "preprocessorErrorDirective": 0.04166666666666666666666667,
        "returnNonBoolInBooleanFunction": 0.04166666666666666666666667,
        "pointerAdditionResultNotNull": 0.04166666666666666666666667
      },
      "thresholds": [
        1.4209483710814847803748687,
        5.1504802003470866481965593
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-190": {
      "positive": false,
      "name": "CWE-190",
      "value": 0E-26,
      "description": "The software performs a calculation that can produce an integer overflow or wraparound, when the logic assumes that the resulting value will always be larger than the original value. This can introduce other weaknesses when the calculation is used for resource management or execution control.",
      "weights": {
        "integerOverflow": 0.3333333333333333333333333,
        "FF1047": 0.3333333333333333333333333,
        "floatConversionOverflow": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        1.3283590065743120467575805
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-391": {
      "positive": false,
      "name": "CWE-391",
      "value": 0.00,
      "description": "Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.",
      "weights": {
        "invalidTestForOverflow": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-628": {
      "positive": false,
      "name": "CWE-628",
      "value": 0E-26,
      "description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.",
      "weights": {
        "funcArgNamesDifferent": 0.1428571428571428571428571,
        "invalidFunctionArgStr": 0.1428571428571428571428571,
        "uselessCallsCompare": 0.1428571428571428571428571,
        "invalidFunctionArg": 0.1428571428571428571428571,
        "invalidFunctionArgBool": 0.1428571428571428571428571,
        "uselessCallsSwap": 0.1428571428571428571428571,
        "sprintfOverlappingData": 0.1428571428571428571428571
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-362, CWE-20": {
      "positive": false,
      "name": "CWE-362, CWE-20",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1035": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-829, CWE-20": {
      "positive": false,
      "name": "CWE-829, CWE-20",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1058": 0.5,
        "FF1059": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-686": {
      "positive": false,
      "name": "CWE-686",
      "value": 0E-27,
      "description": "The software calls a function, procedure, or routine, but the caller specifies an argument that is the wrong data type, which may lead to resultant weaknesses.",
      "weights": {
        "invalidPrintfArgType_s": 0.09090909090909090909090909,
        "invalidPrintfArgType_sint": 0.09090909090909090909090909,
        "invalidPrintfArgType_uint": 0.09090909090909090909090909,
        "invalidScanfArgType_s": 0.09090909090909090909090909,
        "invalidPrintfArgType_p": 0.09090909090909090909090909,
        "invalidScanfArgType_float": 0.09090909090909090909090909,
        "invalidPrintfArgType_float": 0.09090909090909090909090909,
        "invalidScanfArgType_int": 0.09090909090909090909090909,
        "invalidPrintfArgType_n": 0.09090909090909090909090909,
        "wrongPipeParameterSize": 0.09090909090909090909090909,
        "memsetValueOutOfRange": 0.09090909090909090909090909
      },
      "thresholds": [
        0.0,
        0.35622574754323143956980805
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-687": {
      "positive": false,
      "name": "CWE-687",
      "value": 0.00,
      "description": "The software calls a function, procedure, or routine, but the caller specifies an argument that contains the wrong value, which may lead to resultant weaknesses.",
      "weights": {
        "memsetZeroBytes": 0.5,
        "invalidScanfFormatWidth": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-401": {
      "positive": false,
      "name": "CWE-401",
      "value": 0E-26,
      "description": "The software does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.",
      "weights": {
        "leakUnsafeArgAlloc": 0.3333333333333333333333333,
        "memleakOnRealloc": 0.3333333333333333333333333,
        "memleak": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-126": {
      "positive": false,
      "name": "CWE-126",
      "value": 0.50,
      "description": "The software reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.",
      "weights": {
        "FF1022": 0.5,
        "FF1071": 0.5
      },
      "thresholds": [
        0.0,
        0.9294417512492378845547603
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-688": {
      "positive": false,
      "name": "CWE-688",
      "value": 0.00,
      "description": "The software calls a function, procedure, or routine, but the caller specifies the wrong variable or reference as one of the arguments, which may lead to undefined behavior and resultant weaknesses.",
      "weights": {
        "va_start_wrongParameter": 0.5,
        "memsetFloat": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-369": {
      "positive": false,
      "name": "CWE-369",
      "value": 0E-26,
      "description": "The product divides a value by zero.",
      "weights": {
        "nanInArithmeticExpression": 0.3333333333333333333333333,
        "zerodiv": 0.3333333333333333333333333,
        "zerodivcond": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-128": {
      "positive": false,
      "name": "CWE-128",
      "value": 0.00,
      "description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.",
      "weights": {
        "signedCharArrayIndex": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-404": {
      "positive": false,
      "name": "CWE-404",
      "value": 0.00,
      "description": "The program does not release or incorrectly releases a resource before it is made available for re-use.",
      "weights": {
        "virtualDestructor": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-327": {
      "positive": false,
      "name": "CWE-327",
      "value": 0.000,
      "description": "The use of a broken or risky cryptographic algorithm is an unnecessary risk that may result in the exposure of sensitive information.",
      "weights": {
        "FF1049": 0.25,
        "FF1048": 0.25,
        "FF1050": 0.25,
        "FF1051": 0.25
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-768": {
      "positive": false,
      "name": "CWE-768",
      "value": 0.00,
      "description": "The software contains a conditional statement with multiple logical expressions in which one of the non-leading expressions may produce side effects. This may lead to an unexpected state in the program after the execution of the conditional, because short-circuiting logic may prevent the side effects from occurring.",
      "weights": {
        "unknownEvaluationOrder": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-362": {
      "positive": false,
      "name": "CWE-362",
      "value": 0E-26,
      "description": "The program contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.",
      "weights": {
        "FF1034": 0.1666666666666666666666667,
        "FF1031": 0.1666666666666666666666667,
        "FF1032": 0.1666666666666666666666667,
        "FF1033": 0.1666666666666666666666667,
        "raceAfterInterlockedDecrement": 0.1666666666666666666666667,
        "FF1040": 0.1666666666666666666666667
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-120": {
      "positive": false,
      "name": "CWE-120",
      "value": 0.12500,
      "description": "The program copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.",
      "weights": {
        "FF1005": 0.0625,
        "FF1006": 0.0625,
        "FF1007": 0.0625,
        "FF1008": 0.0625,
        "FF1001": 0.0625,
        "FF1012": 0.0625,
        "FF1023": 0.0625,
        "FF1002": 0.0625,
        "FF1024": 0.0625,
        "FF1003": 0.0625,
        "FF1025": 0.0625,
        "FF1004": 0.0625,
        "FF1009": 0.0625,
        "FF1064": 0.0625,
        "FF1010": 0.0625,
        "FF1011": 0.0625
      },
      "thresholds": [
        0.0,
        2.1698565953184386256202985
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-561": {
      "positive": false,
      "name": "CWE-561",
      "value": 0E-26,
      "description": "The software contains dead code, which can never be executed.",
      "weights": {
        "duplicateBreak": 0.3333333333333333333333333,
        "unusedFunction": 0.3333333333333333333333333,
        "unreachableCode": 0.3333333333333333333333333
      },
      "thresholds": [
        0.1578915382719702182153587,
        1.1278227474423154960703555
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-682": {
      "positive": false,
      "name": "CWE-682",
      "value": 0E-27,
      "description": "The software performs a calculation that generates incorrect or unintended results that are later used in security-critical decisions or resource management.",
      "weights": {
        "sizeofwithnumericparameter": 0.09090909090909090909090909,
        "nullPointerArithmeticRedundantCheck": 0.09090909090909090909090909,
        "sizeofDereferencedVoidPointer": 0.09090909090909090909090909,
        "sizeofDivisionMemfunc": 0.09090909090909090909090909,
        "sizeofsizeof": 0.09090909090909090909090909,
        "sizeofVoid": 0.09090909090909090909090909,
        "divideSizeof": 0.09090909090909090909090909,
        "sizeofFunctionCall": 0.09090909090909090909090909,
        "multiplySizeof": 0.09090909090909090909090909,
        "nullPointerArithmetic": 0.09090909090909090909090909,
        "sizeofCalculation": 0.09090909090909090909090909
      },
      "thresholds": [
        0.0,
        0.71245149508646287913961600
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-562": {
      "positive": false,
      "name": "CWE-562",
      "value": 0E-27,
      "description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.",
      "weights": {
        "returnTempReference": 0.08333333333333333333333333,
        "invalidLifetime": 0.08333333333333333333333333,
        "danglingLifetime": 0.08333333333333333333333333,
        "returnAddressOfAutoVariable": 0.08333333333333333333333333,
        "returnReference": 0.08333333333333333333333333,
        "returnDanglingLifetime": 0.08333333333333333333333333,
        "danglingTemporaryLifetime": 0.08333333333333333333333333,
        "returnLocalVariable": 0.08333333333333333333333333,
        "danglingTempReference": 0.08333333333333333333333333,
        "danglingReference": 0.08333333333333333333333333,
        "returnAddressOfFunctionParameter": 0.08333333333333333333333333,
        "autoVariables": 0.08333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-683": {
      "positive": false,
      "name": "CWE-683",
      "value": 0.00,
      "description": "The software calls a function, procedure, or routine, but the caller specifies the arguments in an incorrect order, leading to resultant weaknesses",
      "weights": {
        "funcArgOrderDifferent": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-563": {
      "positive": false,
      "name": "CWE-563",
      "value": 0.00,
      "description": "The variable's value is assigned but never used, making it a dead store.",
      "weights": {
        "unusedAllocatedMemory": 0.1,
        "redundantAssignInSwitch": 0.1,
        "unusedStructMember": 0.1,
        "unusedScopedObject": 0.1,
        "redundantCopy": 0.1,
        "redundantInitialization": 0.1,
        "unreadVariable": 0.1,
        "redundantCopyInSwitch": 0.1,
        "unusedVariable": 0.1,
        "redundantAssignment": 0.1
      },
      "thresholds": [
        0.0,
        0.4468176866091868935550854
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-685": {
      "positive": false,
      "name": "CWE-685",
      "value": 0.00,
      "description": "The software calls a function, procedure, or routine, but the caller specifies too many arguments, or too few arguments, which may lead to undefined behavior and resultant weaknesses.",
      "weights": {
        "wrongPrintfScanfArgNum": 0.5,
        "wrongPrintfScanfParameterPositionError": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-762": {
      "positive": false,
      "name": "CWE-762",
      "value": 0.000,
      "description": "The application attempts to return a memory resource to the system, but it calls a release function that is not compatible with the function that was originally used to allocate that resource.",
      "weights": {
        "uselessCallsRemove": 0.25,
        "memsetClass": 0.25,
        "mismatchAllocDealloc": 0.25,
        "mallocOnClassWarning": 0.25
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-119!/CWE-120": {
      "positive": false,
      "name": "CWE-119!/CWE-120",
      "value": 2.00,
      "description": " ",
      "weights": {
        "FF1013": 1.0
      },
      "thresholds": [
        0.0,
        1.7449196318894013221425239
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-775": {
      "positive": false,
      "name": "CWE-775",
      "value": 0.00,
      "description": "The software does not release a file descriptor or handle after its effective lifetime has ended, i.e., after the file descriptor/handle is no longer needed.",
      "weights": {
        "resourceLeak": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-732": {
      "positive": false,
      "name": "CWE-732",
      "value": 0.000,
      "description": "The product specifies permissions for a security-critical resource in a way that allows that resource to be read or modified by unintended actors.",
      "weights": {
        "FF1041": 0.25,
        "FF1042": 0.25,
        "FF1060": 0.25,
        "FF1061": 0.25
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-457": {
      "positive": false,
      "name": "CWE-457",
      "value": 0E-26,
      "description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results.",
      "weights": {
        "uninitvar": 0.3333333333333333333333333,
        "uninitStructMember": 0.3333333333333333333333333,
        "uninitdata": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-250, CWE-22": {
      "positive": false,
      "name": "CWE-250, CWE-22",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1052": 1.0
      },
      "thresholds": [
        0.0,
        0.53433862131484715935471197
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-415": {
      "positive": false,
      "name": "CWE-415",
      "value": 0.00,
      "description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.",
      "weights": {
        "deallocDealloc": 0.5,
        "doubleFree": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-416": {
      "positive": false,
      "name": "CWE-416",
      "value": 0.00,
      "description": "Referencing memory after it has been freed can cause a program to crash, use unexpected values, or execute code.",
      "weights": {
        "deallocuse": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-250": {
      "positive": false,
      "name": "CWE-250",
      "value": 0.00,
      "description": "The software performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.",
      "weights": {
        "FF1056": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-570": {
      "positive": false,
      "name": "CWE-570",
      "value": 0E-26,
      "description": "The software contains an expression that will always evaluate to false.",
      "weights": {
        "knownConditionTrueFalse": 0.1111111111111111111111111,
        "comparisonFunctionIsAlwaysTrueOrFalse": 0.1111111111111111111111111,
        "unsignedLessThanZero": 0.1111111111111111111111111,
        "incorrectStringCompare": 0.1111111111111111111111111,
        "pointerLessThanZero": 0.1111111111111111111111111,
        "staticStringCompare": 0.1111111111111111111111111,
        "pointerPositive": 0.1111111111111111111111111,
        "comparePointers": 0.1111111111111111111111111,
        "unsignedPositive": 0.1111111111111111111111111
      },
      "thresholds": [
        0.0,
        0.8261811468666816344345796
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-571": {
      "positive": false,
      "name": "CWE-571",
      "value": 0E-26,
      "description": "The software contains an expression that will always evaluate to true.",
      "weights": {
        "incorrectStringBooleanError": 0.1666666666666666666666667,
        "incorrectCharBooleanError": 0.1666666666666666666666667,
        "badBitmaskCheck": 0.1666666666666666666666667,
        "stringCompare": 0.1666666666666666666666667,
        "incorrectLogicOperator": 0.1666666666666666666666667,
        "pointerArithBool": 0.1666666666666666666666667
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-252": {
      "positive": false,
      "name": "CWE-252",
      "value": 0.00,
      "description": "The software does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.",
      "weights": {
        "ignoredReturnValue": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-131": {
      "positive": false,
      "name": "CWE-131",
      "value": 0.00,
      "description": "The software does not correctly calculate the size to be used when allocating a buffer, which could lead to a buffer overflow.",
      "weights": {
        "incompleteArrayFill": 0.5,
        "mismatchSize": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-771": {
      "positive": false,
      "name": "CWE-771",
      "value": 0.00,
      "description": "The software does not properly maintain a reference to a resource that has been allocated, which prevents the resource from being reclaimed.",
      "weights": {
        "leakReturnValNotUsed": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-134": {
      "positive": false,
      "name": "CWE-134",
      "value": 0.000,
      "description": "The software uses a function that accepts a format string as an argument, but the format string originates from an external source.",
      "weights": {
        "FF1016": 0.25,
        "FF1017": 0.25,
        "FF1018": 0.25,
        "FF1019": 0.25
      },
      "thresholds": [
        0.0,
        0.71245149508646287913961600
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-772": {
      "positive": false,
      "name": "CWE-772",
      "value": 0.00,
      "description": "The software does not release a resource after its effective lifetime has ended, i.e., after the resource is no longer needed.",
      "weights": {
        "leakNoVarFunctionCall": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-377": {
      "positive": false,
      "name": "CWE-377",
      "value": 0E-26,
      "description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.",
      "weights": {
        "FF1038": 0.3333333333333333333333333,
        "FF1039": 0.3333333333333333333333333,
        "FF1036": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-362/CWE-367!": {
      "positive": false,
      "name": "CWE-362/CWE-367!",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1030": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-676, CWE-120, CWE-20": {
      "positive": false,
      "name": "CWE-676, CWE-120, CWE-20",
      "value": 0.00,
      "description": " ",
      "weights": {
        "FF1065": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-807": {
      "positive": false,
      "name": "CWE-807",
      "value": 0.00,
      "description": "The application uses a protection mechanism that relies on the existence or values of an input, but the input can be modified by an untrusted actor in a way that bypasses the protection mechanism.",
      "weights": {
        "FF1062": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-587": {
      "positive": false,
      "name": "CWE-587",
      "value": 0.00,
      "description": "The software sets a pointer to a specific address other than NULL or 0.\n+",
      "weights": {
        "assignBoolToPointer": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-664": {
      "positive": false,
      "name": "CWE-664",
      "value": 0.000,
      "description": "The software does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.",
      "weights": {
        "va_list_usedBeforeStarted": 0.05,
        "mismatchingContainers": 0.05,
        "stlcstr": 0.05,
        "mismatchingContainerIterator": 0.05,
        "stlBoundaries": 0.05,
        "boostForeachError": 0.05,
        "IOWithoutPositioning": 0.05,
        "invalidIterator1": 0.05,
        "va_end_missing": 0.05,
        "invalidContainer": 0.05,
        "iterators3": 0.05,
        "eraseDereference": 0.05,
        "writeReadOnlyFile": 0.05,
        "iterators2": 0.05,
        "iterators1": 0.05,
        "mismatchingContainerExpression": 0.05,
        "invalidContainerLoop": 0.05,
        "sameIteratorExpression": 0.05,
        "va_start_subsequentCalls": 0.05,
        "readWriteOnlyFile": 0.05
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-807, CWE-20": {
      "positive": false,
      "name": "CWE-807, CWE-20",
      "value": 0E-26,
      "description": " ",
      "weights": {
        "FF1053": 0.3333333333333333333333333,
        "FF1054": 0.3333333333333333333333333,
        "FF1055": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-665": {
      "positive": false,
      "name": "CWE-665",
      "value": 0.00,
      "description": "The software does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.\n+ Extended Description",
      "weights": {
        "mallocOnClassError": 0.2,
        "unassignedVariable": 0.2,
        "strPlusChar": 0.2,
        "memsetClassReference": 0.2,
        "selfInitialization": 0.2
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-467": {
      "positive": false,
      "name": "CWE-467",
      "value": 0E-26,
      "description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.",
      "weights": {
        "sizeofwithsilentarraypointer": 0.3333333333333333333333333,
        "pointerSize": 0.3333333333333333333333333,
        "arithOperationsOnVoidPointer": 0.3333333333333333333333333
      },
      "thresholds": [
        0.0,
        0.9940518890354320388414701
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-786": {
      "positive": false,
      "name": "CWE-786",
      "value": 0.00,
      "description": "The software reads or writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.",
      "weights": {
        "negativeIndex": 0.5,
        "negativeContainerIndex": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-667": {
      "positive": false,
      "name": "CWE-667",
      "value": 0.00,
      "description": "The software does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.",
      "weights": {
        "localMutex": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-78": {
      "positive": false,
      "name": "CWE-78",
      "value": 0.000,
      "description": "The software constructs all or part of an OS command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended OS command when it is sent to a downstream component.",
      "weights": {
        "FF1045": 0.25,
        "FF1046": 0.25,
        "FF1043": 0.25,
        "FF1044": 0.25
      },
      "thresholds": [
        0.0,
        1.3283590065743120467575805
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-788": {
      "positive": false,
      "name": "CWE-788",
      "value": 0.000,
      "description": "The software reads or writes to a buffer using an index or pointer that references a memory location after the end of the buffer.",
      "weights": {
        "arrayIndexOutOfBounds": 0.25,
        "bufferAccessOutOfBounds": 0.25,
        "arrayIndexOutOfBoundsCond": 0.25,
        "stlOutOfBounds": 0.25
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-120, CWE-20": {
      "positive": false,
      "name": "CWE-120, CWE-20",
      "value": 0E-26,
      "description": " ",
      "weights": {
        "FF1027": 0.1666666666666666666666667,
        "FF1028": 0.1666666666666666666666667,
        "FF1029": 0.1666666666666666666666667,
        "FF1014": 0.1666666666666666666666667,
        "FF1020": 0.1666666666666666666666667,
        "FF1021": 0.1666666666666666666666667
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-703": {
      "positive": false,
      "name": "CWE-703",
      "value": 0.00,
      "description": "The software does not properly anticipate or handle exceptional conditions that rarely occur during normal operation of the software.",
      "weights": {
        "unhandledExceptionSpecification": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-704": {
      "positive": false,
      "name": "CWE-704",
      "value": 0.00,
      "description": "The software does not correctly convert an object, resource, or structure from one type to a different type.",
      "weights": {
        "invalidLengthModifierError": 0.2,
        "stlcstrReturn": 0.2,
        "assignBoolToFloat": 0.2,
        "stlcstrParam": 0.2,
        "invalidPointerCast": 0.2
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-825": {
      "positive": false,
      "name": "CWE-825",
      "value": 0.00,
      "description": "The program dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.",
      "weights": {
        "derefInvalidIterator": 1.0
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    },
    "CWE-783": {
      "positive": false,
      "name": "CWE-783",
      "value": 0.00,
      "description": "The program uses an expression in which operator precedence causes incorrect logic to be used.",
      "weights": {
        "clarifyCalculation": 0.5,
        "clarifyStatement": 0.5
      },
      "thresholds": [
        0.0,
        0.0
      ],
      "eval_strategy": "evaluator.WeightedAverageEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "evaluator.UtilityFunction"
    }
  },
  "diagnostics": {
    "memsetZeroBytes": {
      "toolName": "cppcheck",
      "name": "memsetZeroBytes",
      "value": 0.0,
      "description": "memset() called to fill 0 bytes. The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1027": {
      "toolName": "flawfinder",
      "name": "FF1027",
      "value": 0.0,
      "description": "Some older implementations do not protect against internal buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantCondition": {
      "toolName": "cppcheck",
      "name": "redundantCondition",
      "value": 0.0,
      "description": "Redundant condition: If x &gt; 11 the condition x &gt; 10 is always true.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "funcArgOrderDifferent": {
      "toolName": "cppcheck",
      "name": "funcArgOrderDifferent",
      "value": 0.0,
      "description": "Function &apos;function&apos; argument order different: declaration &apos;&apos; definition &apos;&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1028": {
      "toolName": "flawfinder",
      "name": "FF1028",
      "value": 0.0,
      "description": "This does not protect against buffer overflows by itself, so use with caution",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1029": {
      "toolName": "flawfinder",
      "name": "FF1029",
      "value": 0.0,
      "description": "Check buffer boundaries if used in a loop including recursive loops",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1023": {
      "toolName": "flawfinder",
      "name": "FF1023",
      "value": 0.0,
      "description": "Requires maximum length in CHARACTERS, not bytes",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1024": {
      "toolName": "flawfinder",
      "name": "FF1024",
      "value": 0.0,
      "description": "This function does not protect against buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofsizeof": {
      "toolName": "cppcheck",
      "name": "sizeofsizeof",
      "value": 0.0,
      "description": "Calling &apos;sizeof&apos; on &apos;sizeof&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1025": {
      "toolName": "flawfinder",
      "name": "FF1025",
      "value": 0.0,
      "description": "This function does not protect against buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidScanfFormatWidth": {
      "toolName": "cppcheck",
      "name": "invalidScanfFormatWidth",
      "value": 0.0,
      "description": "Width 5 given in format string (no. 10) is larger than destination buffer &apos;[0]&apos;, use %-1s to prevent overflowing it.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1026": {
      "toolName": "flawfinder",
      "name": "FF1026",
      "value": 0.0,
      "description": "This function does not protect against buffer overflows, and some implementations can overflow internally",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "deallocuse": {
      "toolName": "cppcheck",
      "name": "deallocuse",
      "value": 0.0,
      "description": "Dereferencing &apos;varname&apos; after it is deallocated / released",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "raceAfterInterlockedDecrement": {
      "toolName": "cppcheck",
      "name": "raceAfterInterlockedDecrement",
      "value": 0.0,
      "description": "Race condition: non-interlocked access after InterlockedDecrement(). Use InterlockedDecrement() return value instead.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerSize": {
      "toolName": "cppcheck",
      "name": "pointerSize",
      "value": 0.0,
      "description": "Size of pointer &apos;varname&apos; used instead of size of its data.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "IOWithoutPositioning": {
      "toolName": "cppcheck",
      "name": "IOWithoutPositioning",
      "value": 0.0,
      "description": "Read and write operations without a call to a positioning function (fseek, fsetpos or rewind) or fflush in between result in undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidTestForOverflow": {
      "toolName": "cppcheck",
      "name": "invalidTestForOverflow",
      "value": 0.0,
      "description": "Invalid test for overflow &apos;x + c &lt; x&apos;; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it&apos;s always false.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessCallsRemove": {
      "toolName": "cppcheck",
      "name": "uselessCallsRemove",
      "value": 0.0,
      "description": "Return value of std::remove() ignored. Elements remain in container.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "assignmentInAssert": {
      "toolName": "cppcheck",
      "name": "assignmentInAssert",
      "value": 0.0,
      "description": "Assert statement modifies &apos;var&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "charLiteralWithCharPtrCompare": {
      "toolName": "cppcheck",
      "name": "charLiteralWithCharPtrCompare",
      "value": 0.0,
      "description": "Char literal compared with pointer &apos;foo&apos;. Did you intend to dereference it?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "literalWithCharPtrCompare": {
      "toolName": "cppcheck",
      "name": "literalWithCharPtrCompare",
      "value": 0.0,
      "description": "String literal compared with variable &apos;foo&apos;. Did you intend to use strcmp() instead?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1030": {
      "toolName": "flawfinder",
      "name": "FF1030",
      "value": 0.0,
      "description": "This usually indicates a security flaw.  If an attacker can change anything along the path between the call to access() and the file's actual use (e.g., by moving files), the attacker can exploit the race condition",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "useStlAlgorithm": {
      "toolName": "cppcheck",
      "name": "useStlAlgorithm",
      "value": 0.0,
      "description": "Consider using  algorithm instead of a raw loop.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1031": {
      "toolName": "flawfinder",
      "name": "FF1031",
      "value": 0.0,
      "description": "This accepts filename arguments; if an attacker can move those files, a race condition results.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1032": {
      "toolName": "flawfinder",
      "name": "FF1032",
      "value": 0.0,
      "description": "This accepts filename arguments; if an attacker can move those files, a race condition results.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1033": {
      "toolName": "flawfinder",
      "name": "FF1033",
      "value": 0.0,
      "description": "This accepts filename arguments; if an attacker can move those files, a race condition results.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "assignBoolToFloat": {
      "toolName": "cppcheck",
      "name": "assignBoolToFloat",
      "value": 0.0,
      "description": "Boolean value assigned to floating point variable.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerAdditionResultNotNull": {
      "toolName": "cppcheck",
      "name": "pointerAdditionResultNotNull",
      "value": 0.0,
      "description": "Comparison is wrong. Result of &apos;ptr+1&apos; can&apos;t be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shiftTooManyBitsSigned": {
      "toolName": "cppcheck",
      "name": "shiftTooManyBitsSigned",
      "value": 0.0,
      "description": "Shifting signed 32-bit value by 31 bits is implementation-defined behaviour",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1016": {
      "toolName": "flawfinder",
      "name": "FF1016",
      "value": 0.0,
      "description": "If format strings can be influenced by an attacker, they can be exploited",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1017": {
      "toolName": "flawfinder",
      "name": "FF1017",
      "value": 0.0,
      "description": "If format strings can be influenced by an attacker, they can be exploited",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1018": {
      "toolName": "flawfinder",
      "name": "FF1018",
      "value": 0.0,
      "description": "If syslog's format strings can be influenced by an attacker, they can be exploited",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "publicAllocationError": {
      "toolName": "cppcheck",
      "name": "publicAllocationError",
      "value": 0.0,
      "description": "Possible leak in public function. The pointer &apos;varname&apos; is not deallocated before it is allocated.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1019": {
      "toolName": "flawfinder",
      "name": "FF1019",
      "value": 0.0,
      "description": "If format strings can be influenced by an attacker, they can be exploited, and note that sprintf variations do not always 0-terminate",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedPrivateFunction": {
      "toolName": "cppcheck",
      "name": "unusedPrivateFunction",
      "value": 0.0,
      "description": "Unused private function: &apos;classname::funcname&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1012": {
      "toolName": "flawfinder",
      "name": "FF1012",
      "value": 0.0,
      "description": "Subject to buffer overflow if buffer is not as big as claimed",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1014": {
      "toolName": "flawfinder",
      "name": "FF1014",
      "value": 0.0,
      "description": "Does not check for buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "wrongmathcall": {
      "toolName": "cppcheck",
      "name": "wrongmathcall",
      "value": 0.0,
      "description": "Passing value &apos;#&apos; to #() leads to implementation-defined result.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "globalLockGuard": {
      "toolName": "cppcheck",
      "name": "globalLockGuard",
      "value": 0.0,
      "description": "Lock guard is defined globally. Lock guards are intended to be local. A global lock guard could lead to a deadlock since it won&apos;t unlock until the end of the program.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitMemberVar": {
      "toolName": "cppcheck",
      "name": "uninitMemberVar",
      "value": 0.0,
      "description": "Member variable &apos;classname::varname&apos; is not initialized in the constructor.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidFree": {
      "toolName": "cppcheck",
      "name": "invalidFree",
      "value": 0.0,
      "description": "Mismatching address is freed. The address you get from malloc() must be freed without offset.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidFunctionArgStr": {
      "toolName": "cppcheck",
      "name": "invalidFunctionArgStr",
      "value": 0.0,
      "description": "Invalid func_name() argument nr 1. A nul-terminated string is required.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memleak": {
      "toolName": "cppcheck",
      "name": "memleak",
      "value": 0.0,
      "description": "Memory leak: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplInheritedMember": {
      "toolName": "cppcheck",
      "name": "duplInheritedMember",
      "value": 0.0,
      "description": "The class &apos;class&apos; defines member variable with name &apos;variable&apos; also defined in its parent class &apos;class&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessCallsEmpty": {
      "toolName": "cppcheck",
      "name": "uselessCallsEmpty",
      "value": 0.0,
      "description": "Ineffective call of function &apos;empty()&apos;. Did you intend to call &apos;clear()&apos; instead?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateConditionalAssign": {
      "toolName": "cppcheck",
      "name": "duplicateConditionalAssign",
      "value": 0.0,
      "description": "Duplicate expression for the condition and assignment",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "operatorEqVarError": {
      "toolName": "cppcheck",
      "name": "operatorEqVarError",
      "value": 0.0,
      "description": "Member variable &apos;classname::&apos; is not assigned a value in &apos;classname::operator=&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1020": {
      "toolName": "flawfinder",
      "name": "FF1020",
      "value": 0.0,
      "description": "The scanf() family's %s operation, without a limit specification, permits buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1021": {
      "toolName": "flawfinder",
      "name": "FF1021",
      "value": 0.0,
      "description": "The scanf() family's %s operation, without a limit specification, permits buffer overflows",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidContainerLoop": {
      "toolName": "cppcheck",
      "name": "invalidContainerLoop",
      "value": 0.0,
      "description": "Calling &apos;erase&apos; while iterating the container is invalid.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1022": {
      "toolName": "flawfinder",
      "name": "FF1022",
      "value": 0.0,
      "description": "Does not handle strings that are not \\\\0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected)",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "fflushOnInputStream": {
      "toolName": "cppcheck",
      "name": "fflushOnInputStream",
      "value": 0.0,
      "description": "fflush() called on input stream &apos;stdin&apos; may result in undefined behaviour on non-linux systems.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "variableScope": {
      "toolName": "cppcheck",
      "name": "variableScope",
      "value": 0.0,
      "description": "The scope of the variable &apos;varname&apos; can be reduced.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1005": {
      "toolName": "flawfinder",
      "name": "FF1005",
      "value": 0.0,
      "description": "Does not check for buffer overflows when concatenating to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "throwInNoexceptFunction": {
      "toolName": "cppcheck",
      "name": "throwInNoexceptFunction",
      "value": 0.0,
      "description": "Exception thrown in function declared not to throw exceptions.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1006": {
      "toolName": "flawfinder",
      "name": "FF1006",
      "value": 0.0,
      "description": "Does not check for buffer overflows when concatenating to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1007": {
      "toolName": "flawfinder",
      "name": "FF1007",
      "value": 0.0,
      "description": "Does not check for buffer overflows when concatenating to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1008": {
      "toolName": "flawfinder",
      "name": "FF1008",
      "value": 0.0,
      "description": "Easily used incorrectly; doesn't always \\\\0-terminate or check for invalid pointers [MS-banned] ",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1001": {
      "toolName": "flawfinder",
      "name": "FF1001",
      "value": 0.0,
      "description": "Does not check for buffer overflows when copying to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1002": {
      "toolName": "flawfinder",
      "name": "FF1002",
      "value": 0.0,
      "description": "Does not check for buffer overflows when copying to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantCopyInSwitch": {
      "toolName": "cppcheck",
      "name": "redundantCopyInSwitch",
      "value": 0.0,
      "description": "Buffer &apos;var&apos; is being written before its old content has been used. &apos;break;&apos; missing?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1003": {
      "toolName": "flawfinder",
      "name": "FF1003",
      "value": 0.0,
      "description": "Does not check for buffer overflows when copying to destination [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "functionStatic": {
      "toolName": "cppcheck",
      "name": "functionStatic",
      "value": 0.0,
      "description": "Technically the member function &apos;class::function&apos; can be static (but you may consider moving to unnamed namespace).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shadowFunction": {
      "toolName": "cppcheck",
      "name": "shadowFunction",
      "value": 0.0,
      "description": "Local variable &apos;function&apos; shadows outer function",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1009": {
      "toolName": "flawfinder",
      "name": "FF1009",
      "value": 0.0,
      "description": "Easily used incorrectly; doesn't always \\\\0-terminate or check for invalid pointers [MS-banned] ",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "toomanyconfigs": {
      "toolName": "cppcheck",
      "name": "toomanyconfigs",
      "value": 0.0,
      "description": "Too many #ifdef configurations - cppcheck only checks 12 configurations.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidFunctionArgBool": {
      "toolName": "cppcheck",
      "name": "invalidFunctionArgBool",
      "value": 0.0,
      "description": "Invalid func_name() argument nr 1. A non-boolean value is required.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedAllocatedMemory": {
      "toolName": "cppcheck",
      "name": "unusedAllocatedMemory",
      "value": 0.0,
      "description": "Variable &apos;varname&apos; is allocated memory that is never used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nanInArithmeticExpression": {
      "toolName": "cppcheck",
      "name": "nanInArithmeticExpression",
      "value": 0.0,
      "description": "Using NaN/Inf in a computation.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "containerOutOfBounds": {
      "toolName": "cppcheck",
      "name": "containerOutOfBounds",
      "value": 0.0,
      "description": "Out of bounds access in expression &apos;container[x]&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "constStatement": {
      "toolName": "cppcheck",
      "name": "constStatement",
      "value": 0.0,
      "description": "Redundant code: Found a statement that begins with type constant.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1010": {
      "toolName": "flawfinder",
      "name": "FF1010",
      "value": 0.0,
      "description": "Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1011": {
      "toolName": "flawfinder",
      "name": "FF1011",
      "value": 0.0,
      "description": "Easily used incorrectly (e.g., incorrectly computing the correct maximum size to add) [MS-banned]",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "va_start_subsequentCalls": {
      "toolName": "cppcheck",
      "name": "va_start_subsequentCalls",
      "value": 0.0,
      "description": "va_start() or va_copy() called subsequently on &apos;vl&apos; without va_end() in between.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedLabelConfiguration": {
      "toolName": "cppcheck",
      "name": "unusedLabelConfiguration",
      "value": 0.0,
      "description": "Label &apos;&apos; is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "CastAddressToIntegerAtReturn": {
      "toolName": "cppcheck",
      "name": "CastAddressToIntegerAtReturn",
      "value": 0.0,
      "description": "Returning an address value in a function with integer return type is not portable.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "signedCharArrayIndex": {
      "toolName": "cppcheck",
      "name": "signedCharArrayIndex",
      "value": 0.0,
      "description": "Signed &apos;char&apos; type used as array index.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "getsCalled": {
      "toolName": "cppcheck",
      "name": "getsCalled",
      "value": 0.0,
      "description": "Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "zerodiv": {
      "toolName": "cppcheck",
      "name": "zerodiv",
      "value": 0.0,
      "description": "Division by zero",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlIfStrFind": {
      "toolName": "cppcheck",
      "name": "stlIfStrFind",
      "value": 0.0,
      "description": "Inefficient usage of string::find() in condition; string::starts_with() could be faster.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "staticStringCompare": {
      "toolName": "cppcheck",
      "name": "staticStringCompare",
      "value": 0.0,
      "description": "Unnecessary comparison of static strings.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incorrectLogicOperator": {
      "toolName": "cppcheck",
      "name": "incorrectLogicOperator",
      "value": 0.0,
      "description": "Logical disjunction always evaluates to true: foo &gt; 3 &amp;&amp; foo &lt; 4.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantAssignment": {
      "toolName": "cppcheck",
      "name": "redundantAssignment",
      "value": 0.0,
      "description": "Variable &apos;var&apos; is reassigned a value before the old one has been used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "localMutex": {
      "toolName": "cppcheck",
      "name": "localMutex",
      "value": 0.0,
      "description": "The lock is ineffective because the mutex is locked at the same scope as the mutex itself.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerOutOfBounds": {
      "toolName": "cppcheck",
      "name": "pointerOutOfBounds",
      "value": 0.0,
      "description": "Pointer arithmetic overflow.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "funcArgNamesDifferent": {
      "toolName": "cppcheck",
      "name": "funcArgNamesDifferent",
      "value": 0.0,
      "description": "Function &apos;function&apos; argument 2 names different: declaration &apos;A&apos; definition &apos;B&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_sint": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_sint",
      "value": 0.0,
      "description": "%i in format string (no. 1) requires &apos;int&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnTempReference": {
      "toolName": "cppcheck",
      "name": "returnTempReference",
      "value": 0.0,
      "description": "Reference to temporary returned.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "danglingTemporaryLifetime": {
      "toolName": "cppcheck",
      "name": "danglingTemporaryLifetime",
      "value": 0.0,
      "description": "Using object to temporary.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "cstyleCast": {
      "toolName": "cppcheck",
      "name": "cstyleCast",
      "value": 0.0,
      "description": "C-style pointer casting",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonOfBoolWithBoolError": {
      "toolName": "cppcheck",
      "name": "comparisonOfBoolWithBoolError",
      "value": 0.0,
      "description": "Comparison of a variable having boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator.\"",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "objectIndex": {
      "toolName": "cppcheck",
      "name": "objectIndex",
      "value": 0.0,
      "description": "The address of local variable &apos;&apos; is accessed at non-zero index.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "noConstructor": {
      "toolName": "cppcheck",
      "name": "noConstructor",
      "value": 0.0,
      "description": "The class &apos;classname&apos; does not have a constructor although it has private member variables.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchingContainerExpression": {
      "toolName": "cppcheck",
      "name": "mismatchingContainerExpression",
      "value": 0.0,
      "description": "Iterators to containers from different expressions &apos;v1&apos; and &apos;v2&apos; are used together.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidScanfArgType_int": {
      "toolName": "cppcheck",
      "name": "invalidScanfArgType_int",
      "value": 0.0,
      "description": "%d in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "derefInvalidIterator": {
      "toolName": "cppcheck",
      "name": "derefInvalidIterator",
      "value": 0.0,
      "description": "Possible dereference of an invalid iterator: i",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "negativeContainerIndex": {
      "toolName": "cppcheck",
      "name": "negativeContainerIndex",
      "value": 0.0,
      "description": "Array index -1 is out of bounds.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nullPointerArithmetic": {
      "toolName": "cppcheck",
      "name": "nullPointerArithmetic",
      "value": 0.0,
      "description": "Pointer arithmetic with NULL pointer",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "initializerList": {
      "toolName": "cppcheck",
      "name": "initializerList",
      "value": 0.0,
      "description": "Member variable &apos;class::variable&apos; is in the wrong place in the initializer list.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sprintfOverlappingData": {
      "toolName": "cppcheck",
      "name": "sprintfOverlappingData",
      "value": 0.0,
      "description": "Undefined behavior: Variable &apos;varname&apos; is used as parameter and destination in s[n]printf().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnReference": {
      "toolName": "cppcheck",
      "name": "returnReference",
      "value": 0.0,
      "description": "Reference to local variable returned.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "checkCastIntToCharAndBack": {
      "toolName": "cppcheck",
      "name": "checkCastIntToCharAndBack",
      "value": 0.0,
      "description": "Storing func_name() return value in char variable and then comparing with EOF.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantCopyLocalConst": {
      "toolName": "cppcheck",
      "name": "redundantCopyLocalConst",
      "value": 0.0,
      "description": "Use const reference for &apos;varname&apos; to avoid unnecessary data copying.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "catchExceptionByValue": {
      "toolName": "cppcheck",
      "name": "catchExceptionByValue",
      "value": 0.0,
      "description": "Exception should be caught by reference.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1069": {
      "toolName": "flawfinder",
      "name": "FF1069",
      "value": 0.0,
      "description": "This C routine is considered obsolete (as opposed to the shell command by the same name).   The interaction of this function with SIGALRM and other timer functions such as sleep(), alarm(), setitimer(), and nanosleep() is unspecified",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_float": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_float",
      "value": 0.0,
      "description": "%f in format string (no. 1) requires &apos;double&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "identicalInnerCondition": {
      "toolName": "cppcheck",
      "name": "identicalInnerCondition",
      "value": 0.0,
      "description": "Identical inner &apos;if&apos; condition is always true.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "CastIntegerToAddressAtReturn": {
      "toolName": "cppcheck",
      "name": "CastIntegerToAddressAtReturn",
      "value": 0.0,
      "description": "Returning an integer in a function with pointer return type is not portable.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofwithsilentarraypointer": {
      "toolName": "cppcheck",
      "name": "sizeofwithsilentarraypointer",
      "value": 0.0,
      "description": "Using &apos;sizeof&apos; on array given as function argument returns size of a pointer.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unsafeClassCanLeak": {
      "toolName": "cppcheck",
      "name": "unsafeClassCanLeak",
      "value": 0.0,
      "description": "Class &apos;class&apos; is unsafe, &apos;class::varname&apos; can leak by wrong usage.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "boostForeachError": {
      "toolName": "cppcheck",
      "name": "boostForeachError",
      "value": 0.0,
      "description": "BOOST_FOREACH caches the end() iterator. It&apos;s undefined behavior if you modify the container inside.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "copyCtorPointerCopying": {
      "toolName": "cppcheck",
      "name": "copyCtorPointerCopying",
      "value": 0.0,
      "description": "Value of pointer &apos;var&apos;, which points to allocated memory, is copied in copy constructor instead of allocating new memory.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateBreak": {
      "toolName": "cppcheck",
      "name": "duplicateBreak",
      "value": 0.0,
      "description": "Consecutive return, break, continue, goto or throw statements are unnecessary.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "assertWithSideEffect": {
      "toolName": "cppcheck",
      "name": "assertWithSideEffect",
      "value": 0.0,
      "description": "Assert statement calls a function which may have desired side effects: &apos;function&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unknownEvaluationOrder": {
      "toolName": "cppcheck",
      "name": "unknownEvaluationOrder",
      "value": 0.0,
      "description": "Expression &apos;x = x++;&apos; depends on order of evaluation of side effects",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitDerivedMemberVar": {
      "toolName": "cppcheck",
      "name": "uninitDerivedMemberVar",
      "value": 0.0,
      "description": "Member variable &apos;classname::varname&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class classname?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "exceptDeallocThrow": {
      "toolName": "cppcheck",
      "name": "exceptDeallocThrow",
      "value": 0.0,
      "description": "Exception thrown in invalid state, &apos;p&apos; points at deallocated memory",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "iterators3": {
      "toolName": "cppcheck",
      "name": "iterators3",
      "value": 0.0,
      "description": "Same iterator is used with containers &apos;container&apos; that are defined in different scopes.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "iterators2": {
      "toolName": "cppcheck",
      "name": "iterators2",
      "value": 0.0,
      "description": "Same iterator is used with different containers &apos;container0&apos; and &apos;container1&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "iterators1": {
      "toolName": "cppcheck",
      "name": "iterators1",
      "value": 0.0,
      "description": "Same iterator is used with different containers &apos;container1&apos; and &apos;container2&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "wrongPrintfScanfParameterPositionError": {
      "toolName": "cppcheck",
      "name": "wrongPrintfScanfParameterPositionError",
      "value": 0.0,
      "description": "printf: referencing parameter 2 while 1 arguments given",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "missingIncludeSystem": {
      "toolName": "cppcheck",
      "name": "missingIncludeSystem",
      "value": 0.0,
      "description": "Include file: &lt;&gt; not found. Please note: Cppcheck does not need standard library headers to get proper results.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnNonBoolInBooleanFunction": {
      "toolName": "cppcheck",
      "name": "returnNonBoolInBooleanFunction",
      "value": 0.0,
      "description": "Non-boolean value returned from function returning bool",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "noCopyConstructor": {
      "toolName": "cppcheck",
      "name": "noCopyConstructor",
      "value": 0.0,
      "description": "Class &apos;class&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1056": {
      "toolName": "flawfinder",
      "name": "FF1056",
      "value": 0.0,
      "description": "If this call fails, the program could fail to drop heightened privileges",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "identicalConditionAfterEarlyExit": {
      "toolName": "cppcheck",
      "name": "identicalConditionAfterEarlyExit",
      "value": 0.0,
      "description": "Identical condition &apos;x&apos;, second condition is always false",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unreadVariable": {
      "toolName": "cppcheck",
      "name": "unreadVariable",
      "value": 0.0,
      "description": "Variable &apos;varname&apos; is assigned a value that is never used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchingContainers": {
      "toolName": "cppcheck",
      "name": "mismatchingContainers",
      "value": 0.0,
      "description": "Iterators of different containers &apos;v1&apos; and &apos;v2&apos; are used together.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1058": {
      "toolName": "flawfinder",
      "name": "FF1058",
      "value": 0.0,
      "description": "Ensure that the full path to the library is specified, or current directory may be used",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1059": {
      "toolName": "flawfinder",
      "name": "FF1059",
      "value": 0.0,
      "description": "Ensure that the full path to the library is specified, or current directory may be used",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "constVariable": {
      "toolName": "cppcheck",
      "name": "constVariable",
      "value": 0.0,
      "description": "Variable &apos;x&apos; can be declared with const",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonOfBoolWithInvalidComparator": {
      "toolName": "cppcheck",
      "name": "comparisonOfBoolWithInvalidComparator",
      "value": 0.0,
      "description": "Comparison of a boolean value using relational operator (&lt;, &gt;, &lt;= or &gt;=).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchingContainerIterator": {
      "toolName": "cppcheck",
      "name": "mismatchingContainerIterator",
      "value": 0.0,
      "description": "Iterator &apos;it&apos; from different container &apos;v1&apos; are used together.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitdata": {
      "toolName": "cppcheck",
      "name": "uninitdata",
      "value": 0.0,
      "description": "Memory is allocated but not initialized: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidFunctionArg": {
      "toolName": "cppcheck",
      "name": "invalidFunctionArg",
      "value": 0.0,
      "description": "Invalid func_name() argument nr 1. The value is 0 or 1 (boolean) but the valid values are &apos;1:4&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "functionConst": {
      "toolName": "cppcheck",
      "name": "functionConst",
      "value": 0.0,
      "description": "Technically the member function &apos;class::function&apos; can be const.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "operatorEqToSelf": {
      "toolName": "cppcheck",
      "name": "operatorEqToSelf",
      "value": 0.0,
      "description": "apos;operator=&apos; should check for assignment to self to avoid problems with dynamic memory.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_uint": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_uint",
      "value": 0.0,
      "description": "%u in format string (no. 1) requires &apos;unsigned int&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unassignedVariable": {
      "toolName": "cppcheck",
      "name": "unassignedVariable",
      "value": 0.0,
      "description": "Variable &apos;varname&apos; is not assigned a value.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "oppositeExpression": {
      "toolName": "cppcheck",
      "name": "oppositeExpression",
      "value": 0.0,
      "description": "Opposite expression on both sides of &apos;&amp;&amp;&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "eraseDereference": {
      "toolName": "cppcheck",
      "name": "eraseDereference",
      "value": 0.0,
      "description": "Invalid iterator &apos;iter&apos; used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidLengthModifierError": {
      "toolName": "cppcheck",
      "name": "invalidLengthModifierError",
      "value": 0.0,
      "description": "&apos;I&apos; in format string (no. 1) is a length modifier and cannot be used without a conversion specifier.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlIfFind": {
      "toolName": "cppcheck",
      "name": "stlIfFind",
      "value": 0.0,
      "description": "Suspicious condition. The result of find() is an iterator, but it is not properly checked.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1064": {
      "toolName": "flawfinder",
      "name": "FF1064",
      "value": 0.0,
      "description": "This function is dangerous; it may overflow the provided buffer. It extracts data from a 'protected' area, but most systems have many commands to let users modify the protected area, and it's not always clear what their limits are.  Best to avoid using this function altogether",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1065": {
      "toolName": "flawfinder",
      "name": "FF1065",
      "value": 0.0,
      "description": "This function is obsolete and not portable. It was in SUSv2 but removed by POSIX.2.  What it does exactly varies considerably between systems, particularly in where its prompt is displayed and where it gets its data (e.g., /dev/tty, stdin, stderr, etc.). In addition, some implementations overflow buffers.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1066": {
      "toolName": "flawfinder",
      "name": "FF1066",
      "value": 0.0,
      "description": "These functions are considered obsolete on most systems, and very non-portable (Linux-based systems handle them radically different, basically if gsignal/ssignal were the same as raise/signal respectively, while System V considers them a separate set and obsolete)",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedFunction": {
      "toolName": "cppcheck",
      "name": "unusedFunction",
      "value": 0.0,
      "description": "The function &apos;funcName&apos; is never used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1060": {
      "toolName": "flawfinder",
      "name": "FF1060",
      "value": 0.0,
      "description": "Never create NULL ACLs; an attacker can set it to Everyone (Deny All Access), which would even forbid administrator access",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1061": {
      "toolName": "flawfinder",
      "name": "FF1061",
      "value": 0.0,
      "description": "This doesn't set the inheritance bits in the access control entry (ACE) header",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessCallsSwap": {
      "toolName": "cppcheck",
      "name": "uselessCallsSwap",
      "value": 0.0,
      "description": "It is inefficient to swap a object with itself by calling &apos;str.swap(str)&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPointerCast": {
      "toolName": "cppcheck",
      "name": "invalidPointerCast",
      "value": 0.0,
      "description": "Casting between float * and double * which have an incompatible binary data representation.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1062": {
      "toolName": "flawfinder",
      "name": "FF1062",
      "value": 0.0,
      "description": "It's often easy to fool getlogin.  Sometimes it does not work at all, because some program messed up the utmp file.  Often, it gives only the first 8 characters of the login name. The user currently logged in on the controlling tty of our program need not be the user who started it.  Avoid getlogin() for security-related purposes",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1049": {
      "toolName": "flawfinder",
      "name": "FF1049",
      "value": 0.0,
      "description": "The crypt functions use a poor one-way hashing algorithm; since they only accept passwords of 8 characters or fewer and only a two-byte salt, they are excessively vulnerable to dictionary attacks given today's faster computing equipment",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnAddressOfAutoVariable": {
      "toolName": "cppcheck",
      "name": "returnAddressOfAutoVariable",
      "value": 0.0,
      "description": "Address of an auto-variable returned.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitDerivedMemberVarPrivate": {
      "toolName": "cppcheck",
      "name": "uninitDerivedMemberVarPrivate",
      "value": 0.0,
      "description": "Member variable &apos;classname::varnamepriv&apos; is not initialized in the constructor. Maybe it should be initialized directly in the class classname?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidScanfArgType_s": {
      "toolName": "cppcheck",
      "name": "invalidScanfArgType_s",
      "value": 0.0,
      "description": "s in format string (no. 1) requires a &apos;char *&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnDanglingLifetime": {
      "toolName": "cppcheck",
      "name": "returnDanglingLifetime",
      "value": 0.0,
      "description": "Returning object that will be invalid when returning.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "wrongPrintfScanfArgNum": {
      "toolName": "cppcheck",
      "name": "wrongPrintfScanfArgNum",
      "value": 0.0,
      "description": "printf format string requires 3 parameters but only 2 are given.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "integerOverflow": {
      "toolName": "cppcheck",
      "name": "integerOverflow",
      "value": 0.0,
      "description": "Signed integer overflow for expression &apos;&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1045": {
      "toolName": "flawfinder",
      "name": "FF1045",
      "value": 0.0,
      "description": "This causes a new process to execute and is difficult to use safely",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1046": {
      "toolName": "flawfinder",
      "name": "FF1046",
      "value": 0.0,
      "description": "This causes a new process to execute and is difficult to use safely",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1047": {
      "toolName": "flawfinder",
      "name": "FF1047",
      "value": 0.0,
      "description": "Unless checked, the resulting number can exceed the expected range",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "autovarInvalidDeallocation": {
      "toolName": "cppcheck",
      "name": "autovarInvalidDeallocation",
      "value": 0.0,
      "description": "Deallocation of an auto-variable results in undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1048": {
      "toolName": "flawfinder",
      "name": "FF1048",
      "value": 0.0,
      "description": "This function is not sufficiently random for security-related functions such as key and nonce creation",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "wrongPipeParameterSize": {
      "toolName": "cppcheck",
      "name": "wrongPipeParameterSize",
      "value": 0.0,
      "description": "Buffer &apos;varname&apos; must have size of 2 integers if used as parameter of pipe().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "ignoredReturnValue": {
      "toolName": "cppcheck",
      "name": "ignoredReturnValue",
      "value": 0.0,
      "description": "Return value of function malloc() is not used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "moduloofone": {
      "toolName": "cppcheck",
      "name": "moduloofone",
      "value": 0.0,
      "description": "Modulo of one is always equal to zero",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "arithOperationsOnVoidPointer": {
      "toolName": "cppcheck",
      "name": "arithOperationsOnVoidPointer",
      "value": 0.0,
      "description": "&apos;varname&apos; is of type &apos;vartype&apos;. When using void pointers in calculations, the behaviour is undefined.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shiftTooManyBits": {
      "toolName": "cppcheck",
      "name": "shiftTooManyBits",
      "value": 0.0,
      "description": "Shifting 32-bit value by 40 bits is undefined behaviour",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unsignedLessThanZero": {
      "toolName": "cppcheck",
      "name": "unsignedLessThanZero",
      "value": 0.0,
      "description": "Checking if unsigned expression &apos;varname&apos; is less than zero.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1052": {
      "toolName": "flawfinder",
      "name": "FF1052",
      "value": 0.0,
      "description": "chroot can be very helpful, but is hard to use correctly",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "accessMoved": {
      "toolName": "cppcheck",
      "name": "accessMoved",
      "value": 0.0,
      "description": "Access of moved variable &apos;v&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonError": {
      "toolName": "cppcheck",
      "name": "comparisonError",
      "value": 0.0,
      "description": "Expression &apos;(X &amp; 0x6) == 0x1&apos; is always false.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedVariable": {
      "toolName": "cppcheck",
      "name": "unusedVariable",
      "value": 0.0,
      "description": "Unused variable: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1053": {
      "toolName": "flawfinder",
      "name": "FF1053",
      "value": 0.0,
      "description": "Environment variables are untrustable input if they can be set by an attacker.  They can have any content and length, and the same variable can be set more than once",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessAssignmentArg": {
      "toolName": "cppcheck",
      "name": "uselessAssignmentArg",
      "value": 0.0,
      "description": "Assignment of function parameter has no effect outside the function.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "preprocessorErrorDirective": {
      "toolName": "cppcheck",
      "name": "preprocessorErrorDirective",
      "value": 0.0,
      "description": "#error message",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "danglingReference": {
      "toolName": "cppcheck",
      "name": "danglingReference",
      "value": 0.0,
      "description": "Non-local reference variable &apos;x&apos; to local variable &apos;y&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1054": {
      "toolName": "flawfinder",
      "name": "FF1054",
      "value": 0.0,
      "description": "This function is synonymous with 'getenv(\\\"HOME\\\")';it returns untrustable input if the environment can be set by an attacker.  It can have any content and length, and the same variable can be set more than once",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1055": {
      "toolName": "flawfinder",
      "name": "FF1055",
      "value": 0.0,
      "description": "This function is synonymous with 'getenv(\\\"TMP\\\")';it returns untrustable input if the environment can be set by an attacker. It can have any content and length, and the same variable can be set more than once",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofFunctionCall": {
      "toolName": "cppcheck",
      "name": "sizeofFunctionCall",
      "value": 0.0,
      "description": "Found function call inside sizeof().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "operatorEqRetRefThis": {
      "toolName": "cppcheck",
      "name": "operatorEqRetRefThis",
      "value": 0.0,
      "description": "&apos;operator=&apos; should return reference to &apos;this&apos; instance.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1050": {
      "toolName": "flawfinder",
      "name": "FF1050",
      "value": 0.0,
      "description": "DES only supports a 56-bit keysize, which is too small given today's computers",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1051": {
      "toolName": "flawfinder",
      "name": "FF1051",
      "value": 0.0,
      "description": "These keysizes are too small given today's computers",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1038": {
      "toolName": "flawfinder",
      "name": "FF1038",
      "value": 0.0,
      "description": "Temporary file race condition",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "knownEmptyContainer": {
      "toolName": "cppcheck",
      "name": "knownEmptyContainer",
      "value": 0.0,
      "description": "Iterating over container &apos;var&apos; that is always empty.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1039": {
      "toolName": "flawfinder",
      "name": "FF1039",
      "value": 0.0,
      "description": "Potential for temporary file vulnerability in some circumstances.  Some older Unix-like systems create temp files with permission to write by all by default, so be sure to set the umask to override this. Also, some older Unix systems might fail to use O_EXCL when opening the file, so make sure that O_EXCL is used by the library",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "postfixOperator": {
      "toolName": "cppcheck",
      "name": "postfixOperator",
      "value": 0.0,
      "description": "Prefer prefix ++/-- operators for non-primitive types.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "useClosedFile": {
      "toolName": "cppcheck",
      "name": "useClosedFile",
      "value": 0.0,
      "description": "Used file that is not opened.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "arrayIndexThenCheck": {
      "toolName": "cppcheck",
      "name": "arrayIndexThenCheck",
      "value": 0.0,
      "description": "Array index &apos;i&apos; is used before limits check.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1034": {
      "toolName": "flawfinder",
      "name": "FF1034",
      "value": 0.0,
      "description": "On some old systems, vfork() permits race conditions, and it's very difficult to use correctly",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1035": {
      "toolName": "flawfinder",
      "name": "FF1035",
      "value": 0.0,
      "description": "This accepts filename arguments; if an attacker can move those files or change the link content, a race condition results. Also, it does not terminate with ASCII NUL.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nullPointerDefaultArg": {
      "toolName": "cppcheck",
      "name": "nullPointerDefaultArg",
      "value": 0.0,
      "description": "Possible null pointer dereference if the default parameter value is used: pointer",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1036": {
      "toolName": "flawfinder",
      "name": "FF1036",
      "value": 0.0,
      "description": "Function tmpfile() has a security flaw on some systems (e.g., older System V systems)",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateBranch": {
      "toolName": "cppcheck",
      "name": "duplicateBranch",
      "value": 0.0,
      "description": "Found duplicate branches for &apos;if&apos; and &apos;else&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlcstr": {
      "toolName": "cppcheck",
      "name": "stlcstr",
      "value": 0.0,
      "description": "Dangerous usage of c_str(). The value returned by c_str() is invalid after this call.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "leakUnsafeArgAlloc": {
      "toolName": "cppcheck",
      "name": "leakUnsafeArgAlloc",
      "value": 0.0,
      "description": "Unsafe allocation. If funcName() throws, memory could be leaked. Use make_shared&lt;int&gt;() instead.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nullPointerRedundantCheck": {
      "toolName": "cppcheck",
      "name": "nullPointerRedundantCheck",
      "value": 0.0,
      "description": "Either the condition is redundant or there is possible null pointer dereference: pointer.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchSize": {
      "toolName": "cppcheck",
      "name": "mismatchSize",
      "value": 0.0,
      "description": "The allocated size sz is not a multiple of the underlying type&apos;s size.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlOutOfBounds": {
      "toolName": "cppcheck",
      "name": "stlOutOfBounds",
      "value": 0.0,
      "description": "When i==foo.size(), foo[i] is out of bounds.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "AssignmentIntegerToAddress": {
      "toolName": "cppcheck",
      "name": "AssignmentIntegerToAddress",
      "value": 0.0,
      "description": "Assigning an integer to a pointer is not portable.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1041": {
      "toolName": "flawfinder",
      "name": "FF1041",
      "value": 0.0,
      "description": "Ensure that umask is given most restrictive possible setting (e.g., 066 or 077)",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1042": {
      "toolName": "flawfinder",
      "name": "FF1042",
      "value": 0.0,
      "description": "Temporary file race condition in certain cases (e.g., if run as SYSTEM in many versions of Windows)",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateCondition": {
      "toolName": "cppcheck",
      "name": "duplicateCondition",
      "value": 0.0,
      "description": "The if condition is the same as the previous if condition",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitstring": {
      "toolName": "cppcheck",
      "name": "uninitstring",
      "value": 0.0,
      "description": "Dangerous usage of &apos;varname&apos; (strncpy doesn&apos;t always null-terminate it).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnAddressOfFunctionParameter": {
      "toolName": "cppcheck",
      "name": "returnAddressOfFunctionParameter",
      "value": 0.0,
      "description": "Address of function parameter &apos;parameter&apos; returned.\"",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1043": {
      "toolName": "flawfinder",
      "name": "FF1043",
      "value": 0.0,
      "description": "This causes a new program to execute and is difficult to use safely",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "divideSizeof": {
      "toolName": "cppcheck",
      "name": "divideSizeof",
      "value": 0.0,
      "description": "Division of result of sizeof() on pointer type.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1044": {
      "toolName": "flawfinder",
      "name": "FF1044",
      "value": 0.0,
      "description": "This causes a new program to execute and is difficult to use safely",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memsetValueOutOfRange": {
      "toolName": "cppcheck",
      "name": "memsetValueOutOfRange",
      "value": 0.0,
      "description": "The 2nd memset() argument &apos;varname&apos; doesn&apos;t fit into an &apos;unsigned char&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "FF1040": {
      "toolName": "flawfinder",
      "name": "FF1040",
      "value": 0.0,
      "description": "Check when opening files - can an attacker redirect it (via symlinks), force the opening of special file type (e.g., device files), move things around to create a race condition, control its ancestors, or change its contents?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mallocOnClassWarning": {
      "toolName": "cppcheck",
      "name": "mallocOnClassWarning",
      "value": 0.0,
      "description": "Memory for class instance allocated with malloc(), but class provides constructors.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedLabelSwitch": {
      "toolName": "cppcheck",
      "name": "unusedLabelSwitch",
      "value": 0.0,
      "description": "Label &apos;&apos; is not used. Should this be a &apos;case&apos; of the enclosing switch()?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonOfTwoFuncsReturningBoolError": {
      "toolName": "cppcheck",
      "name": "comparisonOfTwoFuncsReturningBoolError",
      "value": 0.0,
      "description": "Comparison of two functions returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "commaSeparatedReturn": {
      "toolName": "cppcheck",
      "name": "commaSeparatedReturn",
      "value": 0.0,
      "description": "Comma is used in return statement. The comma can easily be misread as a &apos;;&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateExpression": {
      "toolName": "cppcheck",
      "name": "duplicateExpression",
      "value": 0.0,
      "description": "Same expression on both sides of &apos;&amp;&amp;&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantBitwiseOperationInSwitch": {
      "toolName": "cppcheck",
      "name": "redundantBitwiseOperationInSwitch",
      "value": 0.0,
      "description": "Redundant bitwise operation on &apos;varname&apos; in &apos;switch&apos; statement. &apos;break;&apos; missing?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "signConversion": {
      "toolName": "cppcheck",
      "name": "signConversion",
      "value": 0.0,
      "description": "Expression &apos;var&apos; can have a negative value. That is converted to an unsigned value and used in an unsigned calculation.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shiftNegative": {
      "toolName": "cppcheck",
      "name": "shiftNegative",
      "value": 0.0,
      "description": "Shifting by a negative value is undefined behaviour",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlcstrParam": {
      "toolName": "cppcheck",
      "name": "stlcstrParam",
      "value": 0.0,
      "description": "Passing the result of c_str() to a function that takes std::string as argument no. 0 is slow and redundant.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "suspiciousCase": {
      "toolName": "cppcheck",
      "name": "suspiciousCase",
      "value": 0.0,
      "description": "Found suspicious case label in switch(). Operator &apos;||&apos; probably doesn&apos;t work as intended.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidContainer": {
      "toolName": "cppcheck",
      "name": "invalidContainer",
      "value": 0.0,
      "description": "Using object that may be invalid.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlcstrReturn": {
      "toolName": "cppcheck",
      "name": "stlcstrReturn",
      "value": 0.0,
      "description": "Returning the result of c_str() in a function that returns std::string is slow and redundant.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessCallsSubstr": {
      "toolName": "cppcheck",
      "name": "uselessCallsSubstr",
      "value": 0.0,
      "description": "Ineffective call of function &apos;substr&apos; because it returns a copy of the object. Use operator= instead.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "clarifyStatement": {
      "toolName": "cppcheck",
      "name": "clarifyStatement",
      "value": 0.0,
      "description": "In expression like &apos;*A++&apos; the result of &apos;*&apos; is unused. Did you intend to write &apos;(*A)++;&apos;?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessCallsCompare": {
      "toolName": "cppcheck",
      "name": "uselessCallsCompare",
      "value": 0.0,
      "description": "It is inefficient to call &apos;str.find(str)&apos; as it always returns 0.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "truncLongCastReturn": {
      "toolName": "cppcheck",
      "name": "truncLongCastReturn",
      "value": 0.0,
      "description": "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mallocOnClassError": {
      "toolName": "cppcheck",
      "name": "mallocOnClassError",
      "value": 0.0,
      "description": "Memory for class instance allocated with malloc(), but class contains a std::string.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateAssignExpression": {
      "toolName": "cppcheck",
      "name": "duplicateAssignExpression",
      "value": 0.0,
      "description": "Same expression used in consecutive assignments of &apos;x&apos; and &apos;x&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shiftNegativeLHS": {
      "toolName": "cppcheck",
      "name": "shiftNegativeLHS",
      "value": 0.0,
      "description": "Shifting a negative value is technically undefined behaviour",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantCopy": {
      "toolName": "cppcheck",
      "name": "redundantCopy",
      "value": 0.0,
      "description": "Buffer &apos;var&apos; is being written before its old content has been used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidScanfArgType_float": {
      "toolName": "cppcheck",
      "name": "invalidScanfArgType_float",
      "value": 0.0,
      "description": "%f in format string (no. 1) requires &apos;float *&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "leakReturnValNotUsed": {
      "toolName": "cppcheck",
      "name": "leakReturnValNotUsed",
      "value": 0.0,
      "description": "Return value of allocation function &apos;funcName&apos; is not stored.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofVoid": {
      "toolName": "cppcheck",
      "name": "sizeofVoid",
      "value": 0.0,
      "description": "Behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "exceptRethrowCopy": {
      "toolName": "cppcheck",
      "name": "exceptRethrowCopy",
      "value": 0.0,
      "description": "Throwing a copy of the caught exception instead of rethrowing the original exception",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "compareBoolExpressionWithInt": {
      "toolName": "cppcheck",
      "name": "compareBoolExpressionWithInt",
      "value": 0.0,
      "description": "Comparison of a boolean expression with an integer other than 0 or 1.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incrementboolean": {
      "toolName": "cppcheck",
      "name": "incrementboolean",
      "value": 0.0,
      "description": "Incrementing a variable of type &apos;bool&apos; with postfix operator++ is deprecated by the C++ Standard. You should assign it the value &apos;true&apos; instead.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unhandledExceptionSpecification": {
      "toolName": "cppcheck",
      "name": "unhandledExceptionSpecification",
      "value": 0.0,
      "description": "Unhandled exception specification when calling function foo().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "missingOverride": {
      "toolName": "cppcheck",
      "name": "missingOverride",
      "value": 0.0,
      "description": "The function &apos;&apos; overrides a function in a base class but is not marked with a &apos;override&apos; specifier.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shadowVariable": {
      "toolName": "cppcheck",
      "name": "shadowVariable",
      "value": 0.0,
      "description": "Local variable &apos;variable&apos; shadows outer variable",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "returnLocalVariable": {
      "toolName": "cppcheck",
      "name": "returnLocalVariable",
      "value": 0.0,
      "description": "Pointer to local array variable returned.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stringLiteralWrite": {
      "toolName": "cppcheck",
      "name": "stringLiteralWrite",
      "value": 0.0,
      "description": "Modifying string literal directly or indirectly is undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "writeReadOnlyFile": {
      "toolName": "cppcheck",
      "name": "writeReadOnlyFile",
      "value": 0.0,
      "description": "Write operation on a file that was opened only for reading.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "noDestructor": {
      "toolName": "cppcheck",
      "name": "noDestructor",
      "value": 0.0,
      "description": "Class &apos;class&apos; does not have a destructor which is recommended since it has dynamic memory/resource allocation(s).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerLessThanZero": {
      "toolName": "cppcheck",
      "name": "pointerLessThanZero",
      "value": 0.0,
      "description": "A pointer can not be negative so it is either pointless or an error to check if it is.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "reademptycontainer": {
      "toolName": "cppcheck",
      "name": "reademptycontainer",
      "value": 0.0,
      "description": "Reading from empty STL container &apos;var&apos;",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unsignedPositive": {
      "toolName": "cppcheck",
      "name": "unsignedPositive",
      "value": 0.0,
      "description": "Unsigned expression &apos;varname&apos; can&apos;t be negative so it is unnecessary to test it.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "virtualDestructor": {
      "toolName": "cppcheck",
      "name": "virtualDestructor",
      "value": 0.0,
      "description": "Class &apos;Base&apos; which is inherited by class &apos;Derived&apos; does not have a virtual destructor.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "ConfigurationNotChecked": {
      "toolName": "cppcheck",
      "name": "ConfigurationNotChecked",
      "value": 0.0,
      "description": "Skipping configuration &apos;X&apos; since the value of &apos;X&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memsetClass": {
      "toolName": "cppcheck",
      "name": "memsetClass",
      "value": 0.0,
      "description": "Using &apos;memfunc&apos; on class that contains a classname.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitStructMember": {
      "toolName": "cppcheck",
      "name": "uninitStructMember",
      "value": 0.0,
      "description": "Uninitialized struct member: a.b",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "virtualCallInConstructor": {
      "toolName": "cppcheck",
      "name": "virtualCallInConstructor",
      "value": 0.0,
      "description": "Virtual function &apos;f&apos; is called from constructor &apos;&apos; at line 1. Dynamic binding is not used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unpreciseMathCall": {
      "toolName": "cppcheck",
      "name": "unpreciseMathCall",
      "value": 0.0,
      "description": "Expression &apos;1 - erf(x)&apos; can be replaced by &apos;erfc(x)&apos; to avoid loss of precision.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "useInitializationList": {
      "toolName": "cppcheck",
      "name": "useInitializationList",
      "value": 0.0,
      "description": "Variable &apos;variable&apos; is assigned in constructor body. Consider performing initialization in initialization list.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "thisSubtraction": {
      "toolName": "cppcheck",
      "name": "thisSubtraction",
      "value": 0.0,
      "description": "Suspicious pointer subtraction. Did you intend to write &apos;-&gt;&apos;?\"",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unknown": {
      "toolName": "cppcheck",
      "name": "unknown",
      "value": 0.0,
      "description": "this finding is not covered by the description file",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofwithnumericparameter": {
      "toolName": "cppcheck",
      "name": "sizeofwithnumericparameter",
      "value": 0.0,
      "description": "Suspicious usage of &apos;sizeof&apos; with a numeric constant as parameter.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitMemberVarPrivate": {
      "toolName": "cppcheck",
      "name": "uninitMemberVarPrivate",
      "value": 0.0,
      "description": "Member variable &apos;classname::varnamepriv&apos; is not initialized in the constructor.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "operatorEqShouldBeLeftUnimplemented": {
      "toolName": "cppcheck",
      "name": "operatorEqShouldBeLeftUnimplemented",
      "value": 0.0,
      "description": "&apos;operator=&apos; should either return reference to &apos;this&apos; instance or be declared private and left unimplemented.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "exceptThrowInDestructor": {
      "toolName": "cppcheck",
      "name": "exceptThrowInDestructor",
      "value": 0.0,
      "description": "Class Class is not safe, destructor throws exception",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "zerodivcond": {
      "toolName": "cppcheck",
      "name": "zerodivcond",
      "value": 0.0,
      "description": "Either the condition is redundant or there is division by zero.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "selfAssignment": {
      "toolName": "cppcheck",
      "name": "selfAssignment",
      "value": 0.0,
      "description": "Redundant assignment of &apos;varname&apos; to itself.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchingBitAnd": {
      "toolName": "cppcheck",
      "name": "mismatchingBitAnd",
      "value": 0.0,
      "description": "Mismatching bitmasks. Result is always 0 (X = Y &amp; 0xf0; Z = X &amp; 0x1; =&gt; Z=0).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "arrayIndexOutOfBoundsCond": {
      "toolName": "cppcheck",
      "name": "arrayIndexOutOfBoundsCond",
      "value": 0.0,
      "description": "Array &apos;arr[16]&apos; accessed at index 16, which is out of bounds.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparePointers": {
      "toolName": "cppcheck",
      "name": "comparePointers",
      "value": 0.0,
      "description": "Comparing pointers that point to different objects",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "autoVariables": {
      "toolName": "cppcheck",
      "name": "autoVariables",
      "value": 0.0,
      "description": "Address of local auto-variable assigned to a function parameter.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "arrayIndexOutOfBounds": {
      "toolName": "cppcheck",
      "name": "arrayIndexOutOfBounds",
      "value": 0.0,
      "description": "Array &apos;arr[16]&apos; accessed at index 16, which is out of bounds.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nullPointerArithmeticRedundantCheck": {
      "toolName": "cppcheck",
      "name": "nullPointerArithmeticRedundantCheck",
      "value": 0.0,
      "description": "Either the condition is redundant or there is pointer arithmetic with NULL pointer.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incorrectCharBooleanError": {
      "toolName": "cppcheck",
      "name": "incorrectCharBooleanError",
      "value": 0.0,
      "description": "Conversion of char literal &apos;x&apos; to bool always evaluates to true.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantAssignInSwitch": {
      "toolName": "cppcheck",
      "name": "redundantAssignInSwitch",
      "value": 0.0,
      "description": "Variable &apos;var&apos; is reassigned a value before the old one has been used. &apos;break;&apos; missing?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "noExplicitConstructor": {
      "toolName": "cppcheck",
      "name": "noExplicitConstructor",
      "value": 0.0,
      "description": "Class &apos;classname&apos; has a constructor with 1 argument that is not explicit.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofCalculation": {
      "toolName": "cppcheck",
      "name": "sizeofCalculation",
      "value": 0.0,
      "description": "Found calculation inside sizeof().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonFunctionIsAlwaysTrueOrFalse": {
      "toolName": "cppcheck",
      "name": "comparisonFunctionIsAlwaysTrueOrFalse",
      "value": 0.0,
      "description": "Comparison of two identical variables with isless(varName,varName) always evaluates to false.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofDereferencedVoidPointer": {
      "toolName": "cppcheck",
      "name": "sizeofDereferencedVoidPointer",
      "value": 0.0,
      "description": "apos;*varname&apos; is of type &apos;void&apos;, the behaviour of &apos;sizeof(void)&apos; is not covered by the ISO C standard.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "oppositeInnerCondition": {
      "toolName": "cppcheck",
      "name": "oppositeInnerCondition",
      "value": 0.0,
      "description": "Opposite inner &apos;if&apos; condition leads to a dead code block.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedScopedObject": {
      "toolName": "cppcheck",
      "name": "unusedScopedObject",
      "value": 0.0,
      "description": "Instance of &apos;varname&apos; object is destroyed immediately",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "deallocret": {
      "toolName": "cppcheck",
      "name": "deallocret",
      "value": 0.0,
      "description": "Returning/dereferencing &apos;p&apos; after it is deallocated / released",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "strPlusChar": {
      "toolName": "cppcheck",
      "name": "strPlusChar",
      "value": 0.0,
      "description": "Unusual pointer arithmetic. A value of type &apos;char&apos; is added to a string literal.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "AssignmentAddressToInteger": {
      "toolName": "cppcheck",
      "name": "AssignmentAddressToInteger",
      "value": 0.0,
      "description": "Assigning a pointer to an integer is not portable.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uninitvar": {
      "toolName": "cppcheck",
      "name": "uninitvar",
      "value": 0.0,
      "description": "Uninitialized variable: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "operatorEqMissingReturnStatement": {
      "toolName": "cppcheck",
      "name": "operatorEqMissingReturnStatement",
      "value": 0.0,
      "description": "No &apos;return&apos; statement in non-void function causes undefined behavior.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unsafeClassRefMember": {
      "toolName": "cppcheck",
      "name": "unsafeClassRefMember",
      "value": 0.0,
      "description": "Unsafe class: The const reference member &apos;UnsafeClass::var&apos; is initialized by a const reference constructor argument. You need to be careful about lifetime issues.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memleakOnRealloc": {
      "toolName": "cppcheck",
      "name": "memleakOnRealloc",
      "value": 0.0,
      "description": "Common realloc mistake: &apos;varname&apos; nulled but not freed upon failure",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "floatConversionOverflow": {
      "toolName": "cppcheck",
      "name": "floatConversionOverflow",
      "value": 0.0,
      "description": "Undefined behaviour: float (1e+100) to integer conversion overflow.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "readWriteOnlyFile": {
      "toolName": "cppcheck",
      "name": "readWriteOnlyFile",
      "value": 0.0,
      "description": "Read operation on a file that was opened only for writing.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incorrectStringBooleanError": {
      "toolName": "cppcheck",
      "name": "incorrectStringBooleanError",
      "value": 0.0,
      "description": "Conversion of string literal &quot;Hello World&quot; to bool always evaluates to true.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "noOperatorEq": {
      "toolName": "cppcheck",
      "name": "noOperatorEq",
      "value": 0.0,
      "description": "Class &apos;class&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s).",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "resourceLeak": {
      "toolName": "cppcheck",
      "name": "resourceLeak",
      "value": 0.0,
      "description": "Resource leak: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "knownArgumentHiddenVariableExpression": {
      "toolName": "cppcheck",
      "name": "knownArgumentHiddenVariableExpression",
      "value": 0.0,
      "description": "Argument &apos;x*0&apos; to function &apos;func&apos; is always 0. Constant literal calculation disable/hide variable expression &apos;x&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "deallocDealloc": {
      "toolName": "cppcheck",
      "name": "deallocDealloc",
      "value": 0.0,
      "description": "Deallocating a deallocated pointer: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidscanf": {
      "toolName": "cppcheck",
      "name": "invalidscanf",
      "value": 0.0,
      "description": "scanf() without field width limits can crash with huge input data.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "knownConditionTrueFalse": {
      "toolName": "cppcheck",
      "name": "knownConditionTrueFalse",
      "value": 0.0,
      "description": "Condition &apos;x&apos; is always false",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "charBitOp": {
      "toolName": "cppcheck",
      "name": "charBitOp",
      "value": 0.0,
      "description": "When using &apos;char&apos; variables in bit operations, sign extension can generate unexpected results.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidLifetime": {
      "toolName": "cppcheck",
      "name": "invalidLifetime",
      "value": 0.0,
      "description": "Using object that is out of scope.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedStructMember": {
      "toolName": "cppcheck",
      "name": "unusedStructMember",
      "value": 0.0,
      "description": "struct member &apos;structname::variable&apos; is never used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unknownSignCharArrayIndex": {
      "toolName": "cppcheck",
      "name": "unknownSignCharArrayIndex",
      "value": 0.0,
      "description": "&apos;char&apos; type used as array index.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidScanfFormatWidth_smaller": {
      "toolName": "cppcheck",
      "name": "invalidScanfFormatWidth_smaller",
      "value": 0.0,
      "description": "Width -1 given in format string (no. 99) is smaller than destination buffer &apos;[0]&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "danglingTempReference": {
      "toolName": "cppcheck",
      "name": "danglingTempReference",
      "value": 0.0,
      "description": "Using reference to dangling temporary.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantInitialization": {
      "toolName": "cppcheck",
      "name": "redundantInitialization",
      "value": 0.0,
      "description": "Redundant initialization for &apos;var&apos;. The initialized value is overwritten before it is read.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "suspiciousSemicolon": {
      "toolName": "cppcheck",
      "name": "suspiciousSemicolon",
      "value": 0.0,
      "description": "Suspicious use of ; at the end of &apos;&apos; statement.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memsetFloat": {
      "toolName": "cppcheck",
      "name": "memsetFloat",
      "value": 0.0,
      "description": "The 2nd memset() argument &apos;varname&apos; is a float, its representation is implementation defined.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlcstrthrow": {
      "toolName": "cppcheck",
      "name": "stlcstrthrow",
      "value": 0.0,
      "description": "Dangerous usage of c_str(). The value returned by c_str() is invalid after throwing exception.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerArithBool": {
      "toolName": "cppcheck",
      "name": "pointerArithBool",
      "value": 0.0,
      "description": "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "overlappingStrcmp": {
      "toolName": "cppcheck",
      "name": "overlappingStrcmp",
      "value": 0.0,
      "description": "The expression &apos;strcmp(x,&quot;def&quot;) != 0&apos; is suspicious. It overlaps &apos;strcmp(x,&quot;abc&quot;) == 0&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stringCompare": {
      "toolName": "cppcheck",
      "name": "stringCompare",
      "value": 0.0,
      "description": "Comparison of identical string variables.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "va_start_referencePassed": {
      "toolName": "cppcheck",
      "name": "va_start_referencePassed",
      "value": 0.0,
      "description": "Using reference &apos;arg1&apos; as parameter for va_start() results in undefined behaviour.\"",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlBoundaries": {
      "toolName": "cppcheck",
      "name": "stlBoundaries",
      "value": 0.0,
      "description": "Dangerous comparison using operator&lt; on iterator.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "coutCerrMisusage": {
      "toolName": "cppcheck",
      "name": "coutCerrMisusage",
      "value": 0.0,
      "description": "Invalid usage of output stream: &apos;&lt;&lt; std::cout&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "StlMissingComparison": {
      "toolName": "cppcheck",
      "name": "StlMissingComparison",
      "value": 0.0,
      "description": "Missing bounds check for extra iterator increment in loop.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidIterator1": {
      "toolName": "cppcheck",
      "name": "invalidIterator1",
      "value": 0.0,
      "description": "Invalid iterator: iterator",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unreachableCode": {
      "toolName": "cppcheck",
      "name": "unreachableCode",
      "value": 0.0,
      "description": "Statements following return, break, continue, goto or throw will never be executed.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memsetClassReference": {
      "toolName": "cppcheck",
      "name": "memsetClassReference",
      "value": 0.0,
      "description": "Using &apos;memfunc&apos; on class that contains a reference.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "truncLongCastAssignment": {
      "toolName": "cppcheck",
      "name": "truncLongCastAssignment",
      "value": 0.0,
      "description": "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "thisUseAfterFree": {
      "toolName": "cppcheck",
      "name": "thisUseAfterFree",
      "value": 0.0,
      "description": "Using member &apos;x&apos; when &apos;this&apos; might be invalid",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "assignIfError": {
      "toolName": "cppcheck",
      "name": "assignIfError",
      "value": 0.0,
      "description": "Mismatching assignment and comparison, comparison &apos;&apos; is always false.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incorrectStringCompare": {
      "toolName": "cppcheck",
      "name": "incorrectStringCompare",
      "value": 0.0,
      "description": "String literal &quot;Hello World&quot; doesn&apos;t match length argument for substr().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "comparisonOfFuncReturningBoolError": {
      "toolName": "cppcheck",
      "name": "comparisonOfFuncReturningBoolError",
      "value": 0.0,
      "description": "Comparison of a function returning boolean value using relational (&lt;, &gt;, &lt;= or &gt;=) operator.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlSize": {
      "toolName": "cppcheck",
      "name": "stlSize",
      "value": 0.0,
      "description": "Possible inefficient checking for &apos;list&apos; emptiness.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "doubleFree": {
      "toolName": "cppcheck",
      "name": "doubleFree",
      "value": 0.0,
      "description": "Memory pointed to by &apos;varname&apos; is freed twice.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "multiplySizeof": {
      "toolName": "cppcheck",
      "name": "multiplySizeof",
      "value": 0.0,
      "description": "Multiplying sizeof() with sizeof() indicates a logic error.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sameIteratorExpression": {
      "toolName": "cppcheck",
      "name": "sameIteratorExpression",
      "value": 0.0,
      "description": "Same iterators expression are used for algorithm.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "nullPointer": {
      "toolName": "cppcheck",
      "name": "nullPointer",
      "value": 0.0,
      "description": "Null pointer dereference",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "shadowArgument": {
      "toolName": "cppcheck",
      "name": "shadowArgument",
      "value": 0.0,
      "description": "Local variable &apos;argument&apos; shadows outer argument",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "accessForwarded": {
      "toolName": "cppcheck",
      "name": "accessForwarded",
      "value": 0.0,
      "description": "Access of forwarded variable &apos;v&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantIfRemove": {
      "toolName": "cppcheck",
      "name": "redundantIfRemove",
      "value": 0.0,
      "description": "Redundant checking of STL container element existence before removing it.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "danglingLifetime": {
      "toolName": "cppcheck",
      "name": "danglingLifetime",
      "value": 0.0,
      "description": "Non-local variable &apos;x&apos; will use object.\"",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "copyCtorAndEqOperator": {
      "toolName": "cppcheck",
      "name": "copyCtorAndEqOperator",
      "value": 0.0,
      "description": "The class &apos;class&apos; has &apos;operator=&apos; but lack of &apos;copy constructor&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "badBitmaskCheck": {
      "toolName": "cppcheck",
      "name": "badBitmaskCheck",
      "value": 0.0,
      "description": "Result of operator &apos;|&apos; is always true if one operand is non-zero.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "sizeofDivisionMemfunc": {
      "toolName": "cppcheck",
      "name": "sizeofDivisionMemfunc",
      "value": 0.0,
      "description": "Division by result of sizeof(). memset() expects a size in bytes, did you intend to multiply instead?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "knownArgument": {
      "toolName": "cppcheck",
      "name": "knownArgument",
      "value": 0.0,
      "description": "Argument &apos;x-x&apos; to function &apos;func&apos; is always 0. It does not matter what value &apos;x&apos; has.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "moduloAlwaysTrueFalse": {
      "toolName": "cppcheck",
      "name": "moduloAlwaysTrueFalse",
      "value": 0.0,
      "description": "Comparison of modulo result is predetermined, because it is always less than 1.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "purgedConfiguration": {
      "toolName": "cppcheck",
      "name": "purgedConfiguration",
      "value": 0.0,
      "description": "The configuration &apos;&apos; was not checked because its code equals another one.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "selfInitialization": {
      "toolName": "cppcheck",
      "name": "selfInitialization",
      "value": 0.0,
      "description": "Member variable &apos;var&apos; is initialized by itself.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "varFuncNullUB": {
      "toolName": "cppcheck",
      "name": "varFuncNullUB",
      "value": 0.0,
      "description": "Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "va_start_wrongParameter": {
      "toolName": "cppcheck",
      "name": "va_start_wrongParameter",
      "value": 0.0,
      "description": "apos;arg1&apos; given to va_start() is not last named argument of the function. Did you intend to pass &apos;arg2&apos;?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "incompleteArrayFill": {
      "toolName": "cppcheck",
      "name": "incompleteArrayFill",
      "value": 0.0,
      "description": "Array &apos;buffer&apos; is filled incompletely. Did you forget to multiply the size given to &apos;memset()&apos; with &apos;sizeof(*buffer)&apos;?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "negativeIndex": {
      "toolName": "cppcheck",
      "name": "negativeIndex",
      "value": 0.0,
      "description": "Negative array index",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateValueTernary": {
      "toolName": "cppcheck",
      "name": "duplicateValueTernary",
      "value": 0.0,
      "description": "Same value in both branches of ternary operator.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "leakNoVarFunctionCall": {
      "toolName": "cppcheck",
      "name": "leakNoVarFunctionCall",
      "value": 0.0,
      "description": "Allocation with funcName, funcName doesn&apos;t release it.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "bitwiseOnBoolean": {
      "toolName": "cppcheck",
      "name": "bitwiseOnBoolean",
      "value": 0.0,
      "description": "Boolean expression &apos;expression&apos; is used in bitwise operation. Did you mean &apos;&amp;&amp;&apos;?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "passedByValue": {
      "toolName": "cppcheck",
      "name": "passedByValue",
      "value": 0.0,
      "description": "Function parameter &apos;parametername&apos; should be passed by const reference.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "redundantPointerOp": {
      "toolName": "cppcheck",
      "name": "redundantPointerOp",
      "value": 0.0,
      "description": "Redundant pointer operation on &apos;varname&apos; - it&apos;s already a pointer.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "stlFindInsert": {
      "toolName": "cppcheck",
      "name": "stlFindInsert",
      "value": 0.0,
      "description": "Searching before insertion is not necessary.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "memsetClassFloat": {
      "toolName": "cppcheck",
      "name": "memsetClassFloat",
      "value": 0.0,
      "description": "Using memset() on class which contains a floating point number.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "bufferAccessOutOfBounds": {
      "toolName": "cppcheck",
      "name": "bufferAccessOutOfBounds",
      "value": 0.0,
      "description": "Buffer is accessed out of bounds: buf",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "duplicateExpressionTernary": {
      "toolName": "cppcheck",
      "name": "duplicateExpressionTernary",
      "value": 0.0,
      "description": "Same expression in both branches of ternary operator.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pureVirtualCall": {
      "toolName": "cppcheck",
      "name": "pureVirtualCall",
      "value": 0.0,
      "description": "Call of pure virtual function &apos;f&apos; in constructor.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_s": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_s",
      "value": 0.0,
      "description": "%s in format string (no. 1) requires &apos;char *&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "clarifyCalculation": {
      "toolName": "cppcheck",
      "name": "clarifyCalculation",
      "value": 0.0,
      "description": "Clarify calculation precedence for &apos;+&apos; and &apos;?&apos;.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "va_list_usedBeforeStarted": {
      "toolName": "cppcheck",
      "name": "va_list_usedBeforeStarted",
      "value": 0.0,
      "description": "va_list &apos;vl&apos; used before va_start() was called.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_p": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_p",
      "value": 0.0,
      "description": "%p in format string (no. 1) requires an address but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedLabel": {
      "toolName": "cppcheck",
      "name": "unusedLabel",
      "value": 0.0,
      "description": "Label &apos;&apos; is not used.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "seekOnAppendedFile": {
      "toolName": "cppcheck",
      "name": "seekOnAppendedFile",
      "value": 0.0,
      "description": "Repositioning operation performed on a file opened in append mode has no effect.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "pointerPositive": {
      "toolName": "cppcheck",
      "name": "pointerPositive",
      "value": 0.0,
      "description": "A pointer can not be negative so it is either pointless or an error to check if it is not.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "uselessAssignmentPtrArg": {
      "toolName": "cppcheck",
      "name": "uselessAssignmentPtrArg",
      "value": 0.0,
      "description": "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "clarifyCondition": {
      "toolName": "cppcheck",
      "name": "clarifyCondition",
      "value": 0.0,
      "description": "Suspicious condition (assignment + comparison); Clarify expression with parentheses.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "va_end_missing": {
      "toolName": "cppcheck",
      "name": "va_end_missing",
      "value": 0.0,
      "description": "va_list &apos;vl&apos; was opened but not closed by va_end().",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "assignBoolToPointer": {
      "toolName": "cppcheck",
      "name": "assignBoolToPointer",
      "value": 0.0,
      "description": "Boolean value assigned to pointer.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "mismatchAllocDealloc": {
      "toolName": "cppcheck",
      "name": "mismatchAllocDealloc",
      "value": 0.0,
      "description": "Mismatching allocation and deallocation: varname",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "invalidPrintfArgType_n": {
      "toolName": "cppcheck",
      "name": "invalidPrintfArgType_n",
      "value": 0.0,
      "description": "%n in format string (no. 1) requires &apos;int *&apos; but the argument type is Unknown.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "multiCondition": {
      "toolName": "cppcheck",
      "name": "multiCondition",
      "value": 0.0,
      "description": "Expression is always false because &apos;else if&apos; condition matches previous condition at line 1.",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    },
    "unusedLabelSwitchConfiguration": {
      "toolName": "cppcheck",
      "name": "unusedLabelSwitchConfiguration",
      "value": 0.0,
      "description": "Label &apos;&apos; is not used. There is #if in function body so the label might be used in code that is removed by the preprocessor. Should this be a &apos;case&apos; of the enclosing switch()?",
      "weights": {},
      "eval_strategy": "pique.evaluation.DefaultDiagnosticEvaluator",
      "normalizer": "pique.evaluation.DefaultNormalizer",
      "utility_function": "pique.evaluation.DefaultUtility"
    }
  }
}